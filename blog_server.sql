/*
 Navicat Premium Data Transfer

 Source Server         : blog_server
 Source Server Type    : MySQL
 Source Server Version : 50741 (5.7.41-log)
 Source Host           : 10.211.55.24:3306
 Source Schema         : blog_server

 Target Server Type    : MySQL
 Target Server Version : 50741 (5.7.41-log)
 File Encoding         : 65001

 Date: 21/07/2023 14:51:39
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for abouts
-- ----------------------------
DROP TABLE IF EXISTS `abouts`;
CREATE TABLE `abouts` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `content` longtext,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of abouts
-- ----------------------------
BEGIN;
INSERT INTO `abouts` (`id`, `created_at`, `updated_at`, `content`) VALUES (3, '2023-07-05 16:17:22.017', '2023-07-21 14:39:33.094', '![](/uploads/file/c93f7b53a5a8198ae965e284a34eb4bb.jpg)\n\n\n\n> Hey，我是FlowersBloom，喜欢编程、旅行、看书；\n会在这里分享自己所学所用的总结，大家一起进步。');
COMMIT;

-- ----------------------------
-- Table structure for announcements
-- ----------------------------
DROP TABLE IF EXISTS `announcements`;
CREATE TABLE `announcements` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `content` longtext,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of announcements
-- ----------------------------
BEGIN;
INSERT INTO `announcements` (`id`, `created_at`, `updated_at`, `content`) VALUES (1, '2023-06-10 19:33:25.488', '2023-07-19 09:57:47.651', '1、系统即将上线\n2、Echarts的白天黑夜切换出现问题，只有刷新才会成功，等待修复。\n3、我是用户我要修改公告\n');
COMMIT;

-- ----------------------------
-- Table structure for attachments
-- ----------------------------
DROP TABLE IF EXISTS `attachments`;
CREATE TABLE `attachments` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `name` longtext,
  `url` longtext,
  `type` longtext,
  `size` longtext,
  `hash` longtext,
  `location` bigint(20) DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=258 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of attachments
-- ----------------------------
BEGIN;
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (197, '2023-07-16 13:34:58.754', '2023-07-16 13:34:58.754', '无法回到过去 ', 'uploads/file/e602d3bd2051ef1c626ad0defbc33b90.mp3', 'audio/mpeg', '1.32MB', 'e602d3bd2051ef1c626ad0defbc33b90', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (206, '2023-07-16 13:45:06.178', '2023-07-16 13:45:06.178', '无法回到过去', 'uploads/file/90cab7305432adf134780cd3bbe193d3.jpg', 'image/jpeg', '0.07MB', '90cab7305432adf134780cd3bbe193d3', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (216, '2023-07-20 17:55:35.519', '2023-07-20 17:55:35.519', '前端', 'uploads/file/8a4b25111b599d75f4c913642b08d8da.webp', 'image/webp', '0.00MB', '8a4b25111b599d75f4c913642b08d8da', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (217, '2023-07-20 17:57:04.055', '2023-07-20 17:57:04.055', '后端', 'uploads/file/232b23890f134d381c81f88a9da8dfe7.webp', 'image/webp', '0.02MB', '232b23890f134d381c81f88a9da8dfe7', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (218, '2023-07-20 18:00:57.677', '2023-07-20 18:00:57.677', 'centos', 'uploads/file/49ea04ce6fb6f5ca33a7e38651a45631.webp', 'image/webp', '0.00MB', '49ea04ce6fb6f5ca33a7e38651a45631', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (219, '2023-07-20 18:00:57.678', '2023-07-20 18:00:57.678', 'go', 'uploads/file/b9d60d4f81358bd2a648dcc830acb2fa.webp', 'image/webp', '0.01MB', 'b9d60d4f81358bd2a648dcc830acb2fa', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (220, '2023-07-20 18:04:11.387', '2023-07-20 18:04:11.387', 'm1', 'uploads/file/4de3d9aca241848dcda4ade566c62a0d.webp', 'image/webp', '0.02MB', '4de3d9aca241848dcda4ade566c62a0d', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (229, '2023-07-20 22:17:51.143', '2023-07-20 22:17:51.143', 'redis', 'uploads/file/db6b3d0b3952eb20b7390e5485dd0d61.gif', 'image/gif', '0.03MB', 'db6b3d0b3952eb20b7390e5485dd0d61', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (230, '2023-07-20 22:17:51.144', '2023-07-20 22:17:51.144', 'scss', 'uploads/file/76e91c19465e5a79a81ef1f225db5102.webp', 'image/webp', '0.04MB', '76e91c19465e5a79a81ef1f225db5102', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (231, '2023-07-20 22:17:51.144', '2023-07-20 22:17:51.144', 'javascript', 'uploads/file/148d0591700307bdaf06ba2131ac5da2.webp', 'image/webp', '0.01MB', '148d0591700307bdaf06ba2131ac5da2', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (232, '2023-07-20 22:17:51.144', '2023-07-20 22:17:51.144', 'myblog', 'uploads/file/5f03de02fb2878e115807767d0b34211.webp', 'image/webp', '0.02MB', '5f03de02fb2878e115807767d0b34211', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (233, '2023-07-20 22:17:51.144', '2023-07-20 22:17:51.144', 'typora', 'uploads/file/5dd85ee57b9ce437867bd393384c0e06.webp', 'image/webp', '0.01MB', '5dd85ee57b9ce437867bd393384c0e06', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (234, '2023-07-20 22:17:51.144', '2023-07-20 22:17:51.144', 'mysql', 'uploads/file/c2c625f8b96f035617ab30695a9eb3ff.webp', 'image/webp', '0.01MB', 'c2c625f8b96f035617ab30695a9eb3ff', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (235, '2023-07-20 22:18:45.799', '2023-07-20 22:18:45.799', 'git', 'uploads/file/c038c76a09d38abf6135e993be67f7ce.webp', 'image/webp', '0.00MB', 'c038c76a09d38abf6135e993be67f7ce', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (247, '2023-07-21 14:39:30.690', '2023-07-21 14:39:30.690', 'XfMeXNI42d8', 'uploads/file/c93f7b53a5a8198ae965e284a34eb4bb.jpg', 'image/jpeg', '0.29MB', 'c93f7b53a5a8198ae965e284a34eb4bb', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (248, '2023-07-21 14:41:19.256', '2023-07-21 14:41:19.256', '1', 'uploads/file/5dfd0d5cbcdf6fc1dbfa4b8ff567f456.jpg', 'image/jpeg', '0.10MB', '5dfd0d5cbcdf6fc1dbfa4b8ff567f456', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (249, '2023-07-21 14:41:19.259', '2023-07-21 14:41:19.259', '3', 'uploads/file/4889d88fba6a863f82d5e5e40dc8ea70.jpg', 'image/jpeg', '0.57MB', '4889d88fba6a863f82d5e5e40dc8ea70', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (250, '2023-07-21 14:41:19.257', '2023-07-21 14:41:19.257', '4', 'uploads/file/bed1553315cb0696e7f128233e81391c.jpg', 'image/jpeg', '0.21MB', 'bed1553315cb0696e7f128233e81391c', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (251, '2023-07-21 14:41:19.262', '2023-07-21 14:41:19.262', '2', 'uploads/file/4892c1f5b2a5e417d499367ff2d0e511.jpg', 'image/jpeg', '0.68MB', '4892c1f5b2a5e417d499367ff2d0e511', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (252, '2023-07-21 14:41:19.262', '2023-07-21 14:41:19.262', '5', 'uploads/file/4e46fda7b34f2f7270246a8339668ec1.jpg', 'image/jpeg', '0.21MB', '4e46fda7b34f2f7270246a8339668ec1', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (253, '2023-07-21 14:43:01.574', '2023-07-21 14:43:01.574', '2153816007670497280', 'uploads/file/dc350a427fd082ab29f3d69dfd60ddcc.heic', 'image/heic', '0.34MB', 'dc350a427fd082ab29f3d69dfd60ddcc', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (255, '2023-07-21 14:43:01.582', '2023-07-21 14:43:01.582', '2153816016725999616', 'uploads/file/c799cd95c5fd3b600c4b78ae8ac4f300.heic', 'image/heic', '0.51MB', 'c799cd95c5fd3b600c4b78ae8ac4f300', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (256, '2023-07-21 14:43:01.581', '2023-07-21 14:43:01.581', '2153816014058422272', 'uploads/file/a12a3c76c4dc3494b84cb5ebd7c9874e.heic', 'image/heic', '0.44MB', 'a12a3c76c4dc3494b84cb5ebd7c9874e', 1);
INSERT INTO `attachments` (`id`, `created_at`, `updated_at`, `name`, `url`, `type`, `size`, `hash`, `location`) VALUES (257, '2023-07-21 14:43:01.582', '2023-07-21 14:43:01.582', '2153816007687274496', 'uploads/file/37afb388f85f43627fa8a9e2bd28b6bd.heic', 'image/heic', '0.47MB', '37afb388f85f43627fa8a9e2bd28b6bd', 1);
COMMIT;

-- ----------------------------
-- Table structure for blog_tags
-- ----------------------------
DROP TABLE IF EXISTS `blog_tags`;
CREATE TABLE `blog_tags` (
  `blog_id` bigint(20) unsigned NOT NULL,
  `tag_id` bigint(20) unsigned NOT NULL,
  PRIMARY KEY (`blog_id`,`tag_id`),
  KEY `fk_blog_tags_tag` (`tag_id`),
  CONSTRAINT `fk_blog_tags_blog` FOREIGN KEY (`blog_id`) REFERENCES `blogs` (`id`),
  CONSTRAINT `fk_blog_tags_tag` FOREIGN KEY (`tag_id`) REFERENCES `tags` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of blog_tags
-- ----------------------------
BEGIN;
INSERT INTO `blog_tags` (`blog_id`, `tag_id`) VALUES (13, 38);
INSERT INTO `blog_tags` (`blog_id`, `tag_id`) VALUES (19, 44);
INSERT INTO `blog_tags` (`blog_id`, `tag_id`) VALUES (21, 46);
INSERT INTO `blog_tags` (`blog_id`, `tag_id`) VALUES (22, 47);
INSERT INTO `blog_tags` (`blog_id`, `tag_id`) VALUES (23, 48);
INSERT INTO `blog_tags` (`blog_id`, `tag_id`) VALUES (24, 49);
INSERT INTO `blog_tags` (`blog_id`, `tag_id`) VALUES (25, 50);
INSERT INTO `blog_tags` (`blog_id`, `tag_id`) VALUES (26, 51);
INSERT INTO `blog_tags` (`blog_id`, `tag_id`) VALUES (27, 51);
INSERT INTO `blog_tags` (`blog_id`, `tag_id`) VALUES (13, 52);
INSERT INTO `blog_tags` (`blog_id`, `tag_id`) VALUES (23, 52);
INSERT INTO `blog_tags` (`blog_id`, `tag_id`) VALUES (24, 52);
COMMIT;

-- ----------------------------
-- Table structure for blogs
-- ----------------------------
DROP TABLE IF EXISTS `blogs`;
CREATE TABLE `blogs` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `title` varchar(30) DEFAULT NULL,
  `abstract` varchar(200) DEFAULT NULL,
  `content` mediumtext,
  `cover` longtext,
  `read_num` int(6) DEFAULT '0',
  `comment_num` int(6) DEFAULT '0',
  `like_num` int(6) DEFAULT '0',
  `collect_num` int(6) DEFAULT '0',
  `is_publish` tinyint(1) DEFAULT NULL,
  `is_top` tinyint(1) DEFAULT NULL,
  `top_time` datetime(3) DEFAULT NULL,
  `category_id` bigint(20) unsigned DEFAULT NULL,
  `user_id` bigint(20) unsigned DEFAULT NULL,
  `link` longtext,
  PRIMARY KEY (`id`),
  KEY `fk_categories_blogs` (`category_id`),
  CONSTRAINT `fk_categories_blogs` FOREIGN KEY (`category_id`) REFERENCES `categories` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of blogs
-- ----------------------------
BEGIN;
INSERT INTO `blogs` (`id`, `created_at`, `updated_at`, `title`, `abstract`, `content`, `cover`, `read_num`, `comment_num`, `like_num`, `collect_num`, `is_publish`, `is_top`, `top_time`, `category_id`, `user_id`, `link`) VALUES (13, '2023-07-17 17:06:45.927', '2023-07-21 14:43:58.457', '在M1上配置CentOS8', '在m1上安装并配置centos8 有困难？点进来，你会有意想不到的收获...', '\n\n##  1、CentOS8下载地址\n\n```shell\n链接: https://pan.baidu.com/s/1Exblj-Vg3gcF8ZPG6P-tJw 提取码: jh4y \n名称为：CentOS-8-4-2105-aarch64-dvd-custom-202107301400.iso\n```\n\n## 2、CentOS8安装教程\n\n### 2.1 安装初期\n开启安装后修改2，5，8；\n\n### 2.2若出现证书信息\n\nlicense information(license not accepted)\n\n即说明需要同意许可信息， 输入1-回车-2-回车-c-回车-c回车，即可解决；创建用户和网络配置，后面再配置；\n\n### 2.3配置网络\n1. 寻找网络配置文件\n```shell\ncd /etc/sysconfig/network-scripts/\nls\n```\n2. 修改网络配置文件\n```shell\nvi ifcfg-enp0s5\n\nBOOTPROTO=static\n# IP地址\nIPADDR=10.211.55.3\n# 网关\nGATEWAY=10.211.55.1\n# 子网掩码\nNETMASK=255.255.255.0\n# 从no改成yes。系统将在启动时自动开启该接口\nONBOOT=yes\n# DNS服务器1、2\nDNS1=10.211.55.1\nDNS2=8.8.8.8\n\n# 之后选择保存；\n# 可以重启服务器或者重启网络\nreboot\n\nsystemctl restart NetworkManager\n```\n3. 查看ip地址并验证网络链接\n```shell\nip addr\n\ncurl www.taobao.com\n```\n### 2.3关闭防火墙\n\n```shell\n# 查看防火墙状态\nsystemctl status firewalld.sevice\n# 暂时关闭\nsystemctl stop firewalld.sevice\n# 永久关闭\nsystemctl disable firewalld.service\n```\n\n### 2.4 yum源的更新\n\n```shell\n# 建立备份文件夹\nmkdir /tmp/yum\n# 备份文件\ncd /etc/yum.repos.d\nmv *.repo /tmp/yum\n# 安装阿里源\nwget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo\n\n# 然后清除yum缓存再重新生成yum缓存\nyum clean all\n# 生成新的缓存\nyum makecache\n\n# 更新\nyum -y update\n```\n\n### 2.5安装软件\n\n```shell\n# 安装配置网络所需以及下载文件所需的软件\nyum install net-tools\nyum install wget\n```\n\n```shell\n# 设置时间同步\n# 1、安装软件\nyum -y install chrony\n# 2、设置系统自动启动\nsystemctl enable chronyd\n# 3、编辑配置文件\nvim /etc/chrony.conf\n\n# 然后注释掉一行并在其后添加两行\n\n# pool 2.centos.pool.ntp.org.iburst\nserver ntp.aliyun.com iburst\nserver cn.ntp.org.cn iburst\n\n# 4、重新加载配置文件（如果时间不同步，则执行以下两句）\nsystemctl restart chronyd.service\n\nchronyc  sources -v\n\n# 查看当前时间和日期\ndate\n```\n\n### 2.6关闭SELinux\n\n```shell\n# 查看SELinux状态\ngetenforce\n\n# 临时关闭SELinux\nsetenforce 0\n\n# 永久关闭SELinuxvim /etc/selinux/config\n# 将 `SELINUX=enforcing` 改成 `SELINUX=disabled`\n\n# 重启\nreboot\n```\n\n## 3、安装Mysql\n\n### 3.1卸载之前的mysql\n\n```shell\nyum remove -y mysql\nfind / -name mysql \n# 如果找到了残留文件，使用 rm -rf来删除\n```\n\n###  3.2下载mysql安装包\n\n```shell\nwget https://dev.mysql.com/get/mysql80-community-release-el8-1.noarch.rpm\n\nyum install mysql80-community-release-el8-1.noarch.rpm\n```\n\n### 3.3 查看mysql源是否安装成功\n\n```shell\nyum repolist enabled | grep \"mysql.*-community.*\"\n```\n\n### 3.4禁用CentOS8自带的mysql模块\n\n```shell\nyum module disable mysql \n```\n\n### 3.5安装mysql\n\n```shell\nyum install mysql-community-server\n\n# 如果安装过程中出现以下情况，则说明Mysql的GPG升级了，需要重新获取\npublic key for mysql-community-client-plugins-8.0.31-1.e18.aarch64.rpm is not installed\n\n# 输入以下命令即可\nrpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022\n\n# 然后再次执行\nyum install mysql-community-server\n```\n\n### 3.6启动mysql\n\n```shell\nservice mysqld start\n\n# 错误提示\nRedirecting to /bin/systemctl start mysqld.service\n\n# 正确启动命令:\n/bin/systemctl start mysqld.service\n\n# 查看服务状态\nservice mysqld status\n```\n\n### 3.7显示mysql的随机密码\n\n```shell\ngrep \'temporary password\' /var/log/mysqld.log\n\n# 密码是root@localhost:后的一串字符\n```\n\n### 3.8登录并修改mysql密码\n\n```shell\n# 登录，输入上面给出的密码\nmysql -u root -p \n\n# 修改密码，因为我们随便修改密码时,一般都不满足它的策略\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'Root_21root\'; \n\n# 查看密码策略\nSHOW VARIABLES LIKE \'validate_password%\'; \n\n# 修改密码长度\nset global validate_password.length=1; \n# 修改密码等级\nset global validate_password.policy=0; \n\n\n# 设置成自己想要的密码\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'123456\';\n\n# 开放远程访问\n# 1、先创建权限记录\ncreate user \'root\'@\'%\' identified by \'123456\'; \n# 2、授权\ngrant all privileges on *.* to \'root\'@\'%\' with grant option;\n```\n\n\n\n## 4、Centos8安装问题描述\n\n### 4.1缺失GD库的问题解决\n\n在 `nginx` 源码编译安装时，可能会碰到以下错误：\n\n```\n./configure: error: the HTTP image filter module requires the GD library.\nYou can either do not enable the module or install the libraries.\n```\n\n解决办法\n\n```\nyum search GD\n\nyum install -y gd-devel.aarch64\n```\n\n### 4.2yum镜像源问题\n\n```shell\nError: Failed to download metadata for repo \'appstream\': Cannot prepare internal mirrorlist: No URLs in mirrorlist\n\n# 出现这种情况两种原因。\n# 分析一，看是否是网络问题，通过ping www.baidu.com\n# 分析二，便是 CentOS 已经停止维护的问题。2020 年 12 月 8 号，CentOS 官方宣布了停止维护 CentOS Linux 的计划，并推出了 CentOS Stream 项目，CentOS Linux 8 作为 RHEL 8 的复刻版本，生命周期缩短，于 2021 年 12 月 31 日停止更新并停止维护（EOL），更多的信息可以查看 CentOS 官方公告。如果需要更新 CentOS，需要将镜像从 mirror.centos.org 更改为 vault.centos.org\n\n\n# 解决方案\ncd /etc/yum.repos.d/\n\nsed -i \'s/mirrorlist/#mirrorlist/g\' /etc/yum.repos.d/CentOS-*\nsed -i \'s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g\' /etc/yum.repos.d/CentOS-*\n\nyum makecache\nyum update -y\n\n# 你的操作\nyum search GD\n```', 'http://localhost:3000/uploads/file/37afb388f85f43627fa8a9e2bd28b6bd.heic', 681, 0, 245, 1, 1, 0, '0000-00-00 00:00:00.000', 2, 1, '2023/07/17/在M1上配置CentOS8');
INSERT INTO `blogs` (`id`, `created_at`, `updated_at`, `title`, `abstract`, `content`, `cover`, `read_num`, `comment_num`, `like_num`, `collect_num`, `is_publish`, `is_top`, `top_time`, `category_id`, `user_id`, `link`) VALUES (19, '2023-07-20 18:23:36.533', '2023-07-21 14:45:32.119', 'Myblog搭建过程中的一些知识（1）', '在这里你可以了解到许多跟博客搭建的后端知识。', '###  1 路由和API什么关系\n\n1. ==路由负责将HTTP请求映射到相应的控制器==，而==API则定义了应用程序提供给外部应用程序或服务的接口==。因此，路由和API共同构成了Web应用程序的核心功能，使得应用程序能够处理和响应HTTP请求，并提供给外部应用程序或服务的接口。因此，可以说API就是路由所映射的控制器。\n\n###  2 json.marshal()和json.unmarshal()的区别\n\n1. json.marshal()函数会将该数据结构转换为JSON格式的字符串，并返回该字符串和一个error类型的值，表示转换过程中是否出现了错误。在Go语言中，使用string()函数可以将[]byte类型的字节数组转换成字符串类型。\n2. json.unmarshal()函数则是将JSON格式的字符串转换为Go语言中的数据结构。它接受一个[]byte类型的参数，该参数是一个JSON格式的字符串。\n3. 在使用 `json.Unmarshal()` 方法解码 JSON 数据时，需要使用指针 `&p` 来获取解码后的 JSON 数据的内存地址，并将其存储在指针变量 `p` 所指向的内存地址中。\n\n###  3 枚举\n\n1. 在 Go 语言中，没有像其他语言一样的枚举类型，但是可以通过常量来模拟枚举。\n2. 枚举的作用是为了方便程序员对一组相关的常量进行管理和使用。枚举可以提高代码的可读性和可维护性，避免使用魔法数字或字符串，使代码更加清晰和易于理解。\n\n###  4 Goland中os.Remove()无法解决？\n\n1. Go在Go 1.19中引入了一个新的构建标记`unix`，但低于2022. 2的GoLand本身不支持它。将GoLand更新至2022.2.3。或者，在Preferences/Settings|Go|build Tags&Vendoring|Custom标记中添加`unix`构建标记。\n\n###  5 结构体标签\n\n1. CommentModels []CommentModel `gorm:\"foreignKey:ArticleID\" json:\"-\"`\n2. 这个切片的标记中包含 `json:\"-\"`，表示在将其序列化为 JSON 数据时，不会包含 `CommentModels` 字段的值。\n\n- 补充：每个字段都有一个对应的yaml和json标签，用于在不同场景下序列化和反序列化结构体时指定字段名。例如，yaml标签\"created_at\"对应的是结构体中的CreatedAt字段，json标签\"created_at\"对应的是结构体中的CreatedAt字段，这样在序列化和反序列化时就可以根据不同的标签名来进行转换。\n\n###  6 go中url和uri\n\n1. ==URL==是URI的一种特定类型，它包含了用于定位资源的协议、主机名、端口号、路径和查询参数等信息。\n2. ==URI==是一个更广泛的概念，它包括了所有能够唯一标识一个资源的字符串。\n\n###  7 go中ShouldBindJSON 和 ShouldBindUri\n\n1. 在Go语言中，`ShouldBindJSON`和`ShouldBindUri`是gin框架中的两个方法，用于将HTTP请求中的JSON数据和URI参数绑定到Go结构体中。\n\n###  8 yaml和json的区别\n\nYAML和JSON都是用于序列化数据的格式，但它们有一些不同之处。\n\n1. 语法：YAML使用缩进和换行符来表示数据结构，而JSON使用大括号和方括号来表示数据结构。\n\n2. 可读性：YAML比JSON更易读，因为它使用了更多的自然语言元素，如键值对和列表。 \n\n3. 数据类型：YAML支持更多的数据类型，如日期、时间和正则表达式，而JSON只支持基本数据类型，如字符串、数字、布尔和null。\n\n4. 扩展性：YAML支持注释和引用，可以更好地组织和管理大型数据文件，而JSON不支持注释和引用。 \n\n   虽然YAML和JSON都是字符串格式，但它们的语法和特性不同，因此在不同的情况下选择使用它们\n\n###  9 黑名单和白名单\n\n1. 黑名单：匹配符合的后缀名，则禁止。（简言之，除了黑名单外的都能用）\n2. 白名单：限定指定的后缀名。（简言之，就这几个能用）\n\n###  10 Go中使用结构体和map实现键值对\n\n在Go语言中，结构体和map都可以用来实现键值对。下面分别介绍一下它们的使用方法。\n\n1. 结构体实现键值对\n\n结构体是一种自定义的数据类型，可以包含多个字段。我们可以定义一个结构体来表示键值对，如下所示：\n\n```go\ntype KeyValue struct {\n    Key   string\n    Value string\n}\n```\n\n这个结构体包含了两个字段，分别表示键和值。我们可以创建一个KeyValue类型的切片来存储多个键值对，如下所示：\n\n```go\nvar kvs []KeyValue\nkvs = append(kvs, KeyValue{\"name\", \"John\"})\nkvs = append(kvs, KeyValue{\"age\", \"30\"})\n```\n\n这样就可以通过索引来访问每个键值对了，例如：\n\n```go\nfmt.Println(kvs[0].Key, kvs[0].Value) // 输出 name John\nfmt.Println(kvs[1].Key, kvs[1].Value) // 输出 age 30\n```\n\n2. map实现键值对\n\nmap是一种内置的数据类型，可以用来存储键值对。我们可以定义一个map来存储多个键值对，如下所示：\n\n```go\nvar kvs map[string]string\nkvs = make(map[string]string)\nkvs[\"name\"] = \"John\"\nkvs[\"age\"] = \"30\"\n```\n\n这样就可以通过键来访问每个值了，例如：\n\n```go\nfmt.Println(kvs[\"name\"]) // 输出 John\nfmt.Println(kvs[\"age\"]) // 输出 30\n```\n\n需要注意的是，map是无序的，所以访问键值对的顺序是不确定的。如果需要按照某种顺序访问键值对，可以先将键存储到切片中，然后按照切片的顺序访问map中的值。\n\n###  11 切片和数组的区别\n\n在Go语言中，数组和切片都是用来存储一组相同类型的元素的数据结构，但是它们有一些重要的区别。\n\n1. 定义方式不同：\n\n数组的定义方式为：var arr [n]type，其中n表示数组的长度，type表示数组中元素的类型。\n\n切片的定义方式为：var slice []type，其中type表示切片中元素的类型。\n\n2. 长度和容量不同：\n\n数组的长度是固定的，一旦定义了数组的长度，就不能再改变。而切片的长度是可以动态改变的，可以通过append()函数向切片中添加元素，从而改变切片的长度。\n\n切片还有一个容量的概念，容量是指切片底层数组的长度，可以通过cap()函数获取切片的容量。当切片的长度超过容量时，切片会重新分配底层数组，这会导致性能下降。\n\n3. 传递方式不同：\n\n数组在函数间传递时，会进行值拷贝，即传递的是数组的副本。而切片在函数间传递时，传递的是切片的引用，即传递的是指向底层数组的指针。\n\n举例说明：\n\n// 定义一个数组\nvar arr [5]int = [5]int{1, 2, 3, 4, 5}\n\n// 定义一个切片\nvar slice []int = []int{1, 2, 3, 4, 5}\n\n// 修改数组的第一个元素\narr[0] = 0\n\n// 修改切片的第一个元素\nslice[0] = 0\n\n// 打印数组和切片\nfmt.Println(arr)   // [1 2 3 4 5]\nfmt.Println(slice) // [0 2 3 4 5]\n\n从上面的例子可以看出，修改数组的第一个元素并没有影响到原数组，而修改切片的第一个元素却影响到了原切片。这是因为数组是值类型，而切片是引用类型。\n\n###  12 Md5加密\n\n在Go语言中，可以使用crypto/md5包来进行MD5加密。MD5是一种哈希算法，它将任意长度的消息作为输入，经过一系列复杂的运算，输出一个固定长度的消息摘要。这个摘要通常是一个128位的二进制数，可以表示为32个十六进制数字。\n\n哈希算法是一种将任意长度的数据映射为固定长度的数据的算法。它具有不可逆性、唯一性和抗碰撞性等特点。MD5就是一种哈希算法，它可以将任意长度的数据映射为一个128位的摘要，这个摘要具有唯一性和抗碰撞性。\n\n在Go语言中，可以使用crypto/md5包中的md5.Sum函数来对数据进行MD5哈希。例如，下面的代码可以对字符串\"hello world\"进行MD5哈希：\n\n```go\npackage main\n\nimport (\n    \"crypto/md5\"\n    \"fmt\"\n)\n\nfunc main() {\n    data := []byte(\"hello world\")\n    hash := md5.Sum(data)\n    fmt.Printf(\"%x\\n\", hash)\n}\n```\n\n输出结果为：\n\n```\n5eb63bbbe01eeed093cb22bb8f5acdc3\n```\n\n可以看到，输出的结果是一个32位的十六进制数字，这就是对\"hello world\"进行MD5哈希后得到的摘要。\n\n总之，MD5加密是一种哈希算法，它可以将任意长度的数据映射为一个固定长度的摘要。在Go语言中，可以使用crypto/md5包来进行MD5加密。\n\n###   13 Gorm中Find和Take的区别\n\n在GORM中，`find`和`take`都是用于查询数据的方法，但它们有一些区别。\n\n`find`方法用于查找符合条件的所有记录，并返回一个包含这些记录的数组。例如：\n\n```go\nvar users []User\ndb.Find(&users, \"age > ?\", 18)\n```\n\n这个例子中，`Find`方法会查找所有年龄大于18岁的用户，并将它们存储在`users`数组中。\n\n`take`方法用于查找符合条件的第一条记录，并返回一个包含该记录的结构体。例如：\n\n```go\nvar user User\ndb.Where(\"name = ?\", \"John\").Take(&user)\n```\n\n这个例子中，`Take`方法会查找名字为\"John\"的第一个用户，并将其存储在`user`结构体中。\n\n因此，`find`方法返回一个数组，而`take`方法返回一个结构体。另外，`find`方法可以返回多条记录，而`take`方法只返回一条记录。\n\n###   14 分页查询\n\n```go\nvar users []Student\n// 一页多少条\nlimit := 2\n// 第几页\npage := 1\n// 偏移量\noffset := (page - 1) * limit\nDB.Limit(limit).Offset(offset).Find(&users)\nfmt.Println(users)\n```\n\n###  15 在Go中泛型和interface{}的区别\n\n在Go中，泛型和interface{}都是用于处理不确定类型的数据的机制，但它们有一些重要的区别。\n\n1. 泛型是一种在编译时确定类型的机制，而interface{}是一种在运行时确定类型的机制。泛型可以在编译时检查类型安全性，而interface{}只能在运行时检查类型安全性。\n\n2. 泛型可以定义函数、结构体、接口等，而interface{}只能作为函数参数或返回值使用。\n\n3. 泛型可以限制类型的范围，例如只允许使用数字类型或字符串类型，而interface{}可以接受任何类型的值。\n\n4. 泛型可以提高代码的可读性和可维护性，因为它可以避免使用类型断言和类型转换，而interface{}需要使用类型断言和类型转换来访问具体类型的值。\n\n总之，泛型是一种更加类型安全和灵活的机制，而interface{}则更加通用和灵活。在选择使用哪种机制时，需要根据具体的需求和场景进行权衡和选择。\n\n###  16 在请求方法中，PUT和POST的区别\n\n1. PUT用于更新\n2. POST用于创建\n\n###  17 Go中Reflect⚠️\n\n1. 举例子\n\n```go\nfunc GetValidMsg(err error, obj any) string {\n	// 使用的时候，需要传obj的指针\n	getObj := reflect.TypeOf(obj)\n	// 将err接口断言为具体类型\n	if errs, ok := err.(validator.ValidationErrors); ok {\n		// 断言成功\n		for _, e := range errs {\n			// 循环每一个错误信息\n			// 根据报错字段名，获取结构体的具体字段\n			if f, exits := getObj.Elem().FieldByName(e.Field()); exits {\n        // errs当中的字段是否存在于Obj当中。如果存在则获取msg的详细信息并返回\n				msg := f.Tag.Get(\"msg\")\n				return msg\n			}\n		}\n	}\n\n	return err.Error()\n}\n//reflect.TypeOf(obj).Elem().FieldByName(e.Field());\n\n//接下来，我们来解释一下reflect.TypeOf(obj).Elem().FieldByName(e.Field())这个表达式的含义：\n\n- reflect.TypeOf(obj)：获取obj的类型信息。\n- .Elem()：获取obj指向的元素类型，如果obj是指针类型，则获取指针指向的元素类型。\n- .FieldByName(e.Field())：获取元素类型中名为e.Field()的字段信息。\n```\n\n2. 说明\n\n   我们可以使用reflect包来获取Person结构体中名为\"Name\"的字段信息： \n\n   ```\n   package main\n   \n   import (\n       \"fmt\"\n       \"reflect\"\n   )\n   \n   type Person struct {\n       Name string\n       Age  int\n   }\n   \n   func main() {\n       p := Person{Name: \"Alice\", Age: 20}\n       e := reflect.ValueOf(&p).Elem()\n       field := e.FieldByName(\"Name\")\n       fmt.Println(field) // 输出Alice\n   }\n   \n   ```\n\n   在上面的例子中，我们使用reflect.ValueOf()函数获取p的值信息，然后使用.Elem()函数获取p指向的元素类型，最后使用.FieldByName()函数获取元素类型中名为\"Name\"的字段信息。\n\n###  18 Gin中API和Service的关系\n\n​		API和Service之间的联系在于，API调用Service处理业务逻辑，负责处理业务逻辑，与数据存储层进行交互，并将处理结果返回给客户端。API和Service之间的分离可以使代码更加清晰、易于维护和扩展。同时，API和Service之间的分离也可以使代码更加可测试，可以更容易地编写单元测试和集成测试。\n\n###  19 在gorm中为什么有时候查询需要map\n\n在 GORM 中，有时候需要使用 map 进行查询，这是因为 GORM 支持使用 map 作为查询条件，可以更加灵活地构建查询语句。使用 map 作为查询条件时，可以指定查询的字段、条件和排序方式等，例如： \n\n```go\ngo db.Where(map[string]interface{}{\"name\": \"John\", \"age >\": 18}).Order(\"age desc\").Find(&users) \n```\n\n 上面的代码中，使用 map 指定了查询条件，其中包括 name 和 age 字段的条件，以及按照 age 字段降序排序。这种方式可以方便地构建复杂的查询语句，同时也可以避免使用字符串拼接的方式构建查询语句，提高代码的可读性和安全性。\n\n###  20 GORM-操作语句\n\n```go\n// 1.DB.Model\nglobal.DB.Model(models.BannerModel{}).Select(\"id\", \"path\", \"name\").Scan(&imageList)\n\n//该方法通过调用全局变量DB的Model方法，指定了要查询的模型为BannerModel，并通过Select方法指定了要查询的字段为id、path和name。然后，通过Scan方法将查询结果映射到一个名为imageList的ImageResponse类型的切片中。\n\n\n// 2.DB.Create\nerr = global.DB.Create(&menuModel).Error\n\n//DB是一个全局变量，它代表了一个数据库连接。Create()是一个方法，它将menuModel作为参数传递给它，以便将其插入到数据库中。这个方法会返回一个错误对象，如果插入成功，则该对象为nil。\n\n// 3. DB.Order  对结果继续查询。\nvar menuList []models.MenuModel\nvar menuIDList []uint\nglobal.DB.Order(\"sort desc\").Find(&menuList).Select(\"id\").Scan(&menuIDList)\n\n//这段代码使用了Golang中的ORM框架，通过查询数据库中的菜单列表，并按照sort字段进行降序排序，将结果存储在menuList切片中。接着，使用Select方法选择id字段，将结果存储在menuIDList切片中。最终，menuIDList中存储的是数据库中所有菜单的id值。\n\n\n// 4. DB.Preload\nvar menuImages []models.MenuBannerModel\nglobal.DB.Preload(\"BannerModel\").Order(\"sort asc\").Find(&menuImages, \"menu_id in ?\", menuIDList)\n//以下是获取到的数据\n{\n    \"menu_id\":2,\n    \"MenuModel\":{\n        \"id\":0,\n        \"created_at\":\"0001-01-01T00:00:00Z\",\n        \"title\":\"\",\n        \"path\":\"\",\n        \"slogan\":\"\",\n        \"abstract\":null,\n        \"abstract_time\":0,\n        \"banners\":null,\n        \"banner_time\":0,\n        \"sort\":0\n    },\n    \"banner_id\":16,\n    \"BannerModel\":{\n        \"id\":16,\n        \"created_at\":\"2023-04-26T19:15:04.548+08:00\",\n        \"path\":\"uploads/file/2153816023092953088.heic\",\n        \"hash\":\"c94367acd9bb4abbfa90011b592da017\",\n        \"name\":\"2153816023092953088.heic\",\n        \"image_type\":\"本地\"\n    },\n    \"sort\":0\n}\n\n//这段代码使用了Golang的ORM框架，通过查询数据库获取指定菜单ID列表中的菜单横幅数据。具体解释如下：\n\n1. `menuBanners []models.MenuBannerModel`：定义一个切片变量menuBanners，用于存储查询结果。\n\n2. `global.DB`：使用全局变量global.DB获取数据库连接对象。\n\n3. `Preload(\"BannerModel\")`：使用ORM框架的预加载功能，将BannerModel模型与MenuBannerModel模型关联起来，以便在查询结果中同时获取BannerModel的数据。\n\n4. `Order(\"sort desc\")`：按照sort字段进行降序排序，以便获取排序靠前的横幅数据。\n\n5. `Find(&menuBanners, \"menu_id in ?\", menuIDList)`：使用ORM框架的Find方法查询数据库，将查询结果存储到menuBanners变量中。其中，第一个参数&menuBanners表示将查询结果存储到menuBanners变量中，第二个参数\"menu_id in ?\"表示查询条件，其中?表示一个占位符，第三个参数menuIDList表示占位符的值，即菜单ID列表。这样就可以查询出指定菜单ID列表中的菜单横幅数据。\n\n\n// 5. update\nglobal.DB.Model(&menuModel).Updates(maps)\n\n这段代码是使用 GORM 库对数据库进行更新操作的代码。\n\n`global.DB` 是一个全局变量，代表了一个已经连接的数据库实例。\n\n`.Model(&menuModel)` 指定了要更新的数据模型，这里的 `menuModel` 是一个结构体类型的变量，代表了数据库中的一条记录。\n\n`.Updates(maps)` 是更新操作的具体实现，`maps` 是一个 map 类型的变量，包含了要更新的字段和对应的值。这个方法会根据 `menuModel` 中的主键来定位要更新的记录，并将 `maps` 中的字段值更新到数据库中。\n\n需要注意的是，这个方法只会更新 `maps` 中指定的字段，如果要更新所有字段，可以使用 `.Updates(&menuModel)` 方法。\n```\n\n###  21 Docker中container、images、volumes三者的区别\n\nDocker是一种容器化技术，它将应用程序及其依赖项打包在一个可移植的容器中，以便在任何地方运行。在Docker中，有三个重要的概念：container、images和volumes。\n\n1. Container（容器）\n\n容器是Docker中最基本的概念，它是一个独立的运行环境，包含应用程序及其依赖项。容器可以被创建、启动、停止、删除和移动。每个容器都是独立的，具有自己的文件系统、网络和进程空间。\n\n2. Images（镜像）\n\n镜像是容器的基础，它是一个只读的模板，包含了创建容器所需的所有信息，包括应用程序、依赖项、配置文件等。镜像可以被创建、修改、删除和分享。每个镜像都有一个唯一的标识符，称为镜像ID。\n\n3. Volumes（卷）\n\n卷是Docker中用于持久化数据的机制，它可以将容器内的数据存储在宿主机上，以便在容器删除后数据不会丢失。卷可以被创建、删除和挂载到容器中。每个卷都有一个唯一的标识符，称为卷名。\n\n总的来说，容器是运行时的实例，镜像是容器的模板，卷是用于持久化数据的机制。\n\n###  22 JSON Web Token\n\nJWT（JSON Web Token）是一种用于在网络上传递信息的开放标准，它可以在用户和服务器之间安全地传递信息。在Go中，JWT通常用于鉴权，即验证用户是否有权限访问某些资源。\n\nJWT鉴权的流程如下：\n\n1. 用户向服务器发送登录请求，服务器验证用户的身份信息，如果验证通过，服务器会生成一个JWT并将其发送给客户端。\n\n2. 客户端收到JWT后，将其保存在本地，以便在后续的请求中使用。\n\n3. 当客户端向服务器发送请求时，它会将JWT作为请求头的一部分发送给服务器。\n\n4. 服务器收到请求后，会从JWT中解析出用户的身份信息，并验证该用户是否有权限访问该资源。\n\n5. 如果验证通过，服务器会返回请求的资源，否则会返回一个错误信息。\n\nJWT鉴权被称为鉴权，是因为它可以验证用户的身份信息，并控制用户对资源的访问权限。只有在验证通过的情况下，用户才能访问受保护的资源。\n\n\n\n使用JWT的流程如下：   生成JWT：在服务端生成JWT，包含用户信息和过期时间等信息。 2. 发送JWT：将生成的JWT发送给客户端，客户端可以将JWT保存在本地，或者在每次请求时将JWT放在请求头中。 3. 验证JWT：在服务端接收到请求时，需要验证JWT的有效性，包括JWT的签名是否正确、JWT是否过期等。 4. 返回响应：如果JWT验证通过，则返回请求的响应，否则返回错误信息。 总之，JWT是一种安全的身份验证和授权机制，可以在不同的系统之间安全地传输信息，Go语言中有多种第三方库可以用来实现JWT的生成和验证。\n\n###  23 Gin中的中间件\n\nGin是一种基于Go语言的Web框架，它提供了许多中间件来增强Web应用程序的功能。==中间件是一种在请求和响应之间进行处理的函数==，可以用于处理请求、验证身份、记录日志、压缩响应等。Gin中的中间件可以通过使用Use()方法来添加到路由器中，也可以通过使用Group()方法来将中间件应用于特定的路由组。\n\n以下是Gin中常用的中间件：\n\n1. Logger：记录请求和响应的日志信息。\n\n2. Recovery：在应用程序发生panic时，恢复应用程序并返回500错误。\n\n3. CORS：处理跨域资源共享请求。\n\n4. Auth：验证用户身份。\n\n5. Gzip：压缩响应数据。\n\n6. Static：提供静态文件服务。\n\n7. Rate Limit：限制请求速率。\n\n8. JWT：处理JSON Web Token身份验证。\n\n9. Session：处理会话管理。\n\n10. Cache：处理缓存。\n\n通过使用这些中间件，可以轻松地增强Gin应用程序的功能和性能。\n\n\n\n```yaml\n# settings.yaml\njwt:\n  secret: \"\"\n  expires: 24\n  issuer: \"\"\n  \n# 在 YAML 文件中，添加引号和不添加引号的区别在于，添加引号的值会被解析为字符串类型，而不添加引号的值则会根据其语法结构被解析为相应的数据类型，例如整数、浮点数、布尔值等。\n```\n\n这是一个YAML格式的配置文件，其中包含了以下三个JWT（JSON Web Token）相关的设置：\n\n1. secret: \"\" - 这是用于签署JWT的密钥。在这里，密钥为空字符串，这意味着需要在实际使用时设置一个密钥。密钥应该是一个长字符串，越长越好，以确保安全性。\n2. expires: 24 - 这是JWT的过期时间，以小时为单位。在这里，JWT将在24小时后过期。这个值可以根据需要进行更改。\n3.  issuer: \"\" - 这是JWT的发行者。在这里，发行者为空字符串，这意味着需要在实际使用时设置一个发行者。发行者应该是一个唯一的字符串，用于标识JWT的发行者。\n\n###  24 JWT和Cookie的区别\n\nJWT（JSON Web Token）和Cookie都是在Web应用程序中用于身份验证和授权的常见机制，但它们有一些重要的区别。\n\n1. 存储位置\n\nCookie是存储在浏览器中的文本文件，而JWT是存储在客户端的JavaScript对象中的字符串。\n\n2. 安全性\n\nCookie可以被窃取或篡改，因为它们存储在浏览器中，而JWT使用数字签名或加密来保护数据的完整性和安全性。\n\n3. 可扩展性\n\nJWT是基于JSON的，可以存储任何类型的数据，而Cookie只能存储字符串。\n\n4. 跨域支持\n\nCookie只能在同一域名下共享，而JWT可以在不同域名之间共享。\n\n5. 服务器负载\n\n使用Cookie时，每个请求都会包含Cookie，这会增加服务器的负载。而使用JWT时，只需要在第一次请求时将JWT发送到服务器，之后的请求都可以使用该JWT进行身份验证和授权，减少了服务器的负载。\n\n综上所述，JWT相对于Cookie具有更好的安全性、可扩展性和跨域支持，但Cookie在某些情况下仍然是有用的，例如需要在服务器端存储会话数据时。\n\n###  25 在jwt中*CustomClaims表示什么\n\n以下是对代码的解读：\n\n```go\ntype CustomClaims struct {\n    UserID uint   `json:\"user_id\"`\n    Name   string `json:\"name\"`\n    jwt.StandardClaims\n}\n```\n\n这段代码定义了一个名为`CustomClaims`的结构体，它包含了三个字段：\n\n1. `UserID`：表示用户的ID，类型为`uint`，使用`json:\"user_id\"`标记表示在JSON序列化时使用`user_id`作为字段名。\n2. `Name`：表示用户的姓名，类型为`string`，使用`json:\"name\"`标记表示在JSON序列化时使用`name`作为字段名。\n3. `jwt.StandardClaims`：表示JWT的标准声明，包括`Issuer`、`Subject`、`Audience`、`ExpiresAt`、`NotBefore`和`IssuedAt`等字段。\n\n`CustomClaims`结构体的定义表明它是用于JWT的自定义声明，它包含了应用程序需要的额外信息，例如用户ID和姓名等。\n\n在JWT中，声明是用于描述JWT的JSON对象，它包含了一些预定义的字段和应用程序定义的自定义字段。JWT的声明分为标准声明和自定义声明两种类型，标准声明包含了一些预定义的字段，例如`Issuer`、`Subject`、`Audience`、`ExpiresAt`、`NotBefore`和`IssuedAt`等，而自定义声明则包含了应用程序需要的额外信息。\n\n因此，`CustomClaims`表示的是JWT中的自定义声明，它包含了应用程序需要的额外信息，例如用户ID和姓名等。\n\n\n\n###  26 存在jwt那为什么还要存在session和cookie。\n\nJWT（JSON Web Token）是一种用于身份验证和授权的开放标准，它可以在客户端和服务器之间传递信息，以便在不同的系统之间安全地传输数据。JWT通常用于无状态应用程序，因为它们不需要在服务器端存储会话信息。\n\n然而，仍然有一些情况下需要使用session和cookie：\n\n1. 传统的Web应用程序：传统的Web应用程序通常使用session和cookie来存储用户的身份验证信息和其他会话数据。这是因为这些应用程序通常是基于服务器端的，需要在服务器端存储会话信息。\n\n2. CSRF（跨站请求伪造）防御：为了防止CSRF攻击，Web应用程序通常会在cookie中存储CSRF令牌。这个令牌可以防止攻击者在用户不知情的情况下执行恶意操作。\n\n3. 一些特殊的场景：有些场景下，使用session和cookie可能更加方便。例如，当需要在多个页面之间共享数据时，使用session可能更加方便。\n\nSession和Cookie的区别：\n\n1. 存储位置：Session存储在服务器端，Cookie存储在客户端。\n\n2. 存储内容：Session存储的是服务器端的会话信息，Cookie存储的是客户端的数据。\n\n3. 安全性：Session比Cookie更安全，因为会话信息存储在服务器端，而Cookie存储在客户端，容易受到攻击。\n\n4. 生命周期：Session的生命周期由服务器端控制，Cookie的生命周期由客户端控制。\n\n\n###  27 session和cookie的区别是什么\n\nSession和Cookie都是用来在Web应用程序中跟踪用户状态的机制，但它们的实现方式和作用有所不同。\n\n1. Session\n\nSession是一种服务器端的机制，用于跟踪用户的状态。当用户第一次访问网站时，服务器会为该用户创建一个唯一的Session ID，并将该ID存储在服务器上。然后，服务器将Session ID发送给客户端浏览器，==通常是通过Cookie的形式==。客户端浏览器在后续的请求中会将该Session ID发送回服务器，以便服务器能够识别该用户的状态。\n\nSession的优点是可以存储大量的数据，因为数据存储在服务器上，而不是在客户端浏览器上。此外，Session可以存储敏感数据，因为数据存储在服务器上，而不是在客户端浏览器上。\n\n2. Cookie\n\nCookie是一种客户端机制，用于跟踪用户的状态。当用户第一次访问网站时，服务器会将一个Cookie发送给客户端浏览器，该Cookie包含一个唯一的标识符和一些其他信息。客户端浏览器在后续的请求中会将该Cookie发送回服务器，以便服务器能够识别该用户的状态。\n\nCookie的优点是可以存储在客户端浏览器上，因此可以在不同的页面之间共享数据。此外，Cookie可以存储非敏感数据，例如用户的偏好设置或购物车中的商品。\n\n总的来说，Session和Cookie都是用于跟踪用户状态的机制，但它们的实现方式和作用有所不同。Session存储在服务器上，可以存储大量的数据和敏感数据，而Cookie存储在客户端浏览器上，可以在不同的页面之间共享数据，但只能存储非敏感数据。\n\n\n\n```\n⚠️补充：可以理解为存在服务器是session，在传递到客户端就自动转为cookie了，那么由谁转换，又是在哪里执行的\n\n在 Web 应用程序中，Session 是在服务器端创建和维护的，而 Cookie 是在客户端创建和维护的。当用户第一次访问网站时，服务器会为该用户创建一个唯一的 Session ID，并将其存储在服务器端的内存或数据库中。然后，服务器会将该 Session ID 发送给客户端浏览器，通常是通过 Cookie 的方式。客户端浏览器会将该 Session ID 存储在 Cookie 中，并在后续的请求中将其发送给服务器。\n\n因此，Session 和 Cookie 的转换是由服务器和客户端共同完成的。服务器在创建 Session 时会将 Session ID 发送给客户端浏览器，客户端浏览器会将其存储在 Cookie 中，并在后续的请求中将其发送给服务器。服务器接收到客户端发送的 Session ID 后，就可以根据该 ID 来获取对应的 Session 数据。\n```\n\n###  28 go实现人的struct包含ID、Name，还有get 、set方法\n\n下面是使用Go语言实现人的结构体，并包含学号、姓名以及get和set方法的示例代码：\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype Person struct {\n    ID   int\n    Name string\n}\n\nfunc (p *Person) GetID() int {\n    return p.ID\n}\n\nfunc (p *Person) SetID(id int) {\n    p.ID = id\n}\n\nfunc (p *Person) GetName() string {\n    return p.Name\n}\n\nfunc (p *Person) SetName(name string) {\n    p.Name = name\n}\n\nfunc main() {\n    p := Person{ID: 1, Name: \"Alice\"}\n    fmt.Println(p.GetID())   // Output: 1\n    fmt.Println(p.GetName()) // Output: Alice\n\n    p.SetID(2)\n    p.SetName(\"Bob\")\n    fmt.Println(p.GetID())   // Output: 2\n    fmt.Println(p.GetName()) // Output: Bob\n}\n```\n\n在上面的代码中，我们定义了一个名为Person的结构体，包含了ID和Name两个字段。接着，我们为Person结构体定义了GetID、SetID、GetName和SetName四个方法，分别用于获取和设置ID和Name字段的值。\n\n在main函数中，我们创建了一个Person类型的变量p，并初始化了它的ID和Name字段。然后，我们分别调用了p的GetID、GetName、SetID和SetName方法，来获取和设置p的ID和Name字段的值。最后，我们打印了p的ID和Name字段的值，以验证我们的get和set方法是否正常工作。\n\n###  29 Mysql、Redis、Elasticsearch三者的区别与联系\n\nMySQL、Redis和Elasticsearch是三种不同类型的数据库，各自有不同的特点和用途。\n\nMySQL是一种关系型数据库，它使用结构化查询语言（SQL）来管理和操作数据。MySQL适用于需要处理大量结构化数据的应用程序，如电子商务、金融和物流等。\n\nRedis是一种内存数据库，它使用键值对存储数据。Redis适用于需要快速读写数据的应用程序，如缓存、消息队列和实时计数器等。\n\nElasticsearch\n\n1. Elasticsearch是一种全文搜索引擎，它使用倒排索引来存储和搜索文本数据。Elasticsearch适用于需要高效搜索和分析大量文本数据的应用程序，如日志分析、搜索引擎和推荐系统等。\n\n2. Elasticsearch是一种搜索引擎，但它也可以被视为一种数据库。它是一种分布式的文档存储和搜索引擎，可以用于存储、搜索和分析大量的数据。Elasticsearch使用Lucene搜索引擎库来实现全文搜索和分析功能，同时也提供了一些数据库的功能，如索引、查询、聚合等。因此，Elasticsearch既可以作为搜索引擎使用，也可以作为数据库使用。\n\n3. Elasticsearch是一种搜索引擎，也可以被认为是一种分布式文档数据库。它被设计用于快速、可扩展、实时的搜索和分析大量数据。Elasticsearch的主要功能是索引和搜索文档，它使用Lucene搜索引擎作为其核心搜索引擎，但它也提供了许多其他功能，如聚合、分析、地理空间搜索等。因此，Elasticsearch既可以被视为搜索引擎，也可以被视为数据库，但它更适合于搜索和分析数据，而不是传统意义上的事务处理。\n\n\n\n虽然MySQL、Redis和Elasticsearch都是数据库，但它们的设计目的和使用场景不同。在实际应用中，它们也可以相互配合使用，例如使用Redis作为缓存，MySQL作为主数据库，Elasticsearch作为搜索引擎。\n\n###  30 ElasticSearch\n\n索引是 Elasticsearch 中用于快速搜索和过滤文档的数据结构。它类似于数据库中的索引，可以提高搜索和过滤的效率。在这段代码中，如果索引已经存在，就会先删除原有的索引，再创建新的索引。这样做的目的可能是为了确保索引的设置和映射等信息都是最新的，避免出现旧的设置和映射导致搜索和过滤结果不准确的情况。\n\n\n\n在将文章数据存入elasticsearch中，我们需要先定义一个索引（index），索引是elasticsearch中最高层次的数据容器，类似于关系型数据库中的数据库。一个索引可以包含多个类型（type），类型类似于关系型数据库中的表。在每个类型中，我们可以存储多个文档（document），文档类似于关系型数据库中的行。 \n\n###  31 gin中elasticsearch的使用包括初始化\n\n在gin中使用elasticsearch需要先安装elasticsearch的go客户端库，可以使用以下命令进行安装：\n\n```\ngo get github.com/olivere/elastic/v7\n```\n\n安装完成后，可以在gin的路由处理函数中使用elasticsearch进行数据的增删改查操作。以下是一个简单的例子：\n\n```go\nimport (\n    \"github.com/gin-gonic/gin\"\n    \"github.com/olivere/elastic/v7\"\n)\n\nfunc main() {\n    // 初始化elasticsearch客户端\n    client, err := elastic.NewClient(elastic.SetURL(\"http://localhost:9200\"))\n    if err != nil {\n        panic(err)\n    }\n\n    // 创建gin实例\n    r := gin.Default()\n\n    // 定义路由\n    r.GET(\"/search\", func(c *gin.Context) {\n        // 构建查询条件\n        query := elastic.NewMatchQuery(\"title\", \"gin\")\n\n        // 执行查询\n        result, err := client.Search().\n            Index(\"articles\").\n            Query(query).\n            Do(c.Request.Context())\n        if err != nil {\n            c.JSON(500, gin.H{\"error\": err.Error()})\n            return\n        }\n\n        // 处理查询结果\n        var articles []Article\n        for _, hit := range result.Hits.Hits {\n            var article Article\n            err := json.Unmarshal(hit.Source, &article)\n            if err != nil {\n                continue\n            }\n            articles = append(articles, article)\n        }\n\n        // 返回查询结果\n        c.JSON(200, articles)\n    })\n\n    // 启动服务\n    r.Run(\":8080\")\n}\n```\n\n在上面的例子中，我们首先使用`elastic.NewClient`函数初始化了一个elasticsearch客户端，然后在路由处理函数中使用`client.Search`方法执行了一个查询操作，并将查询结果返回给客户端。在查询条件中，我们使用了`elastic.NewMatchQuery`方法构建了一个匹配查询条件，查询的是`articles`索引中`title`字段包含`gin`关键字的文档。最后，我们将查询结果转换成了一个`Article`类型的切片，并使用`c.JSON`方法将结果返回给客户端。\n\n需要注意的是，在实际使用中，我们还需要处理elasticsearch客户端的错误、设置查询条件、处理查询结果等问题。同时，我们还需要在elasticsearch中创建索引、映射等数据结构，以便于存储和查询数据。\n\n###  32 docker中的的elasticsearch如何设置密码\n\n```shell\n # 1、进入容器\n docker exec -it elasticsearch bash # elasticsearch 替换为你容器的名称\n\n# 2、修改配置文件\nvi config/elasticsearch.yml\n\n# 添加如下内容\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\nhttp.cors.allow-headers: Authorization\nxpack.security.enabled: true\nxpack.security.transport.ssl.enabled: true\n\n# 3、退出并重启容器\nexit\ndocker restart elasticsearch # elasticsearch 替换为你容器的名称\n\n# 4、设置密码\ndocker exec -it elasticsearch bash\n\nbin/elasticsearch-setup-passwords interactive\n\n\n```\n\n###  33 session、jwt、cookie三者的区别，简要但精确概述。\n\nSession、JWT、Cookie都是用于在Web应用中跟踪用户身份的机制，但它们的实现方式和使用场景有所不同。\n\n1. Session是一种服务器端的机制，它通过在服务器上存储用户信息来跟踪用户身份。当用户第一次访问服务器时，服务器会创建一个唯一的Session ID，并将该ID存储在Cookie中发送给客户端。客户端在后续的请求中会携带该Cookie，服务器通过该ID来查找对应的Session信息，从而识别用户身份。Session的优点是安全性高，但缺点是需要在服务器上存储用户信息，对服务器的性能有一定影响。\n\n2. JWT（JSON Web Token）是一种基于JSON的开放标准，它通过在客户端和服务器之间传递加密的JSON对象来跟踪用户身份。JWT包含了用户的信息和签名，可以在客户端存储，不需要在服务器上存储用户信息，因此对服务器的性能影响较小。JWT的优点是灵活性高，可以在多个应用之间共享用户身份信息，但缺点是安全性相对较低。\n\n3. Cookie是一种在客户端存储数据的机制，它通过在客户端存储用户信息来跟踪用户身份。当用户第一次访问服务器时，服务器会在响应头中设置一个Set-Cookie头部，客户端会将该Cookie存储在本地。在后续的请求中，客户端会自动携带该Cookie，服务器通过该Cookie来识别用户身份。Cookie的优点是简单易用，但缺点是安全性相对较低，容易被篡改或伪造。\n\n###  34 ssl和tsl，介绍概念和区别，tcp、udp有什么区别和联系\n\nSSL（Secure Sockets Layer）和TLS（Transport Layer Security）都是用于保护网络通信安全的协议。SSL是TLS的前身，TLS是SSL的升级版。\n\nSSL和TLS都使用公钥加密和对称密钥加密来保护通信安全。公钥加密用于建立安全连接，对称密钥加密用于加密数据传输。\n\nSSL和TLS的主要区别在于：\n\n1. 加密算法：SSL使用的加密算法主要是DES、RC4、MD5等，而TLS使用的加密算法主要是AES、SHA-1、SHA-2等。TLS的加密算法更加安全。\n\n2. 握手过程：SSL和TLS的握手过程有所不同。TLS的握手过程更加复杂，包含了更多的安全检查和验证步骤。\n\n3. 支持的协议版本：SSL只支持SSL 3.0和TLS 1.0，而TLS支持TLS 1.0、TLS 1.1、TLS 1.2和TLS 1.3等多个版本。\n\n总的来说，TLS比SSL更加安全和可靠，因此在实际应用中，更多地使用TLS来保护网络通信安全。\n\n### 35 Restful api解释并举例\n\nRESTful API 是一种基于 HTTP 协议设计和实现的 Web API 的架构风格，它强调使用统一的、面向资源的接口来访问和操作 Web 上的数据和功能，具有可读性高、可缓存、可伸缩性强等优点，广泛应用于各种 Web 应用程序中。\n\nRESTful API 的核心是资源和 HTTP 方法。资源可以是任何可以被访问的东西，如用户、文章、评论、订单等，==每个资源都可以通过唯一的 URI 来访问==。HTTP 方法包括 GET、POST、PUT、PATCH、DELETE 等，它们对资源进行不同的操作，如获取、创建、更新、部分更新和删除。\n\n举个例子，假设我们正在开发一个博客应用程序，需要实现一个 RESTful API 来操作博客文章资源。我们可以按照以下规则来设计和实现 API：\n\n1. 获取文章列表：使用 GET 方法，访问 URI `/api/articles`，返回文章列表的 JSON 数据。\n\n2. 获取单篇文章：使用 GET 方法，访问 URI `/api/articles/:id`，其中 `:id` 是文章的唯一标识符，返回该文章的 JSON 数据。\n\n3. 创建文章：使用 POST 方法，访问 URI `/api/articles`，发送包含文章数据的 JSON 数据，返回创建后的文章的 JSON 数据。\n\n4. 更新文章：使用 PUT 或 PATCH 方法，访问 URI `/api/articles/:id`，其中 `:id` 是文章的唯一标识符，发送包含要更新的文章数据的 JSON 数据，返回更新后的文章的 JSON 数据。\n\n5. 删除文章：使用 DELETE 方法，访问 URI `/api/articles/:id`，其中 `:id` 是文章的唯一标识符，返回删除成功的 JSON 数据。\n\n通过以上规则，我们就可以设计和实现一个符合 RESTful API 标准的博客文章资源的 API。客户端可以通过 HTTP 请求来访问这些 API，以实现对博客文章资源的操作。\n\n\n\n### 36 在gin中jwt包含哪几部分信息\n\n在 Gin 中，JWT（JSON Web Token）包含三个部分信息，分别是：\n\n1. Header（头部）：包含了 JWT 的类型和使用的算法，通常是固定的，使用 Base64 编码。\n\n2. Payload（负载）：包含了 JWT 的具体内容，比如用户的 ID、角色、权限等信息，也可以自定义其他信息，使用 Base64 编码。\n\n3. Signature（签名）：由 Header 和 Payload 通过指定的算法生成的签名，用于验证 JWT 的合法性。\n', 'http://localhost:3000/uploads/file/c799cd95c5fd3b600c4b78ae8ac4f300.heic', 22, 0, 2, 1, 1, 1, '2023-07-21 14:44:22.020', 12, 1, '2023/07/20/Myblog搭建过程中的一些知识（1）');
INSERT INTO `blogs` (`id`, `created_at`, `updated_at`, `title`, `abstract`, `content`, `cover`, `read_num`, `comment_num`, `like_num`, `collect_num`, `is_publish`, `is_top`, `top_time`, `category_id`, `user_id`, `link`) VALUES (21, '2023-07-20 20:14:12.065', '2023-07-21 14:43:32.432', 'CSS语法扩展之SCSS', 'SCSS是一种CSS预处理器，通过提供变量、嵌套、混入等功能，使样式表编写更高效、灵活，并提升CSS代码的可维护性。', '1. 格式。[括号]\n\n```scss\n.header {\n  span {\n    font-size: 20px;\n    /*使用&符号代表父选择器*/\n    &:hover{\n      font-size:30px;\n    }\n    &:active{\n      font-size:15px;\n    }\n  }\n}\n```\n\n2. 变量表示\n\n```scss\n$font-size:14px;\n//用于定义内容，只需要修改一处就实现对全文的同样样式的编写。\n\n//注意：变量的定义需要放到执行之前。\n.header {\n	font-size:$font-size;\n}\n```\n\n3. 嵌套\n\n```scss\n.header{\n	span{\n		color:red;\n		a{\n			color:blue;\n		}\n	}\n}\n```\n\n4. 变量的统一管理与变量引入\n\n```scss\n//使用下划线 来管理变量.下划线是防止编译器生成css文件\n_variable.scss\n\n//引入\n@import \'variable\';\n```\n\n5. 混入**mixin**\n\n```scss\n//公共部分的统一管理采用混入（mixin）的方式\n\n//main.scss\n@import \'mixin\';\n \n.text{\n  //width:100px;//传递参数\n  @include singleline-ellipsis(100px);\n}\n\n.content-text{\n  //width:200px;\n  @include singleline-ellipsis(200px);\n}\n\n//_mixin.scss\n//抽离公共的部分。\n@mixin singleline-ellipsis($width){//单行省略\n  width:$width;\n  overflow:hidden;\n  text-overflow:hidden;\n  white-space:nowrap;//禁止文字自动换行。\n}\n```\n\n6. 响应式布局，content\n\n```scss\n//main.scss\n\n@mixin ipad{\n  @media screen and (min-width:768px){\n    @content;\n  }\n}\n\n.header{\n  width:1000px;\n  @include ipad{\n    width:500px;\n  }\n}\n\n.footer{\n  color:blue;\n  @include ipad{\n    color:red;\n  }\n}\n\n//编译后的css\n//main.css\n\n.header {\n  width: 1000px;\n}\n@media screen and (min-width: 768px) {\n  .header {\n    width: 500px;\n  }\n}\n\n.footer {\n  color: blue;\n}\n@media screen and (min-width: 768px) {\n  .footer {\n    color: red;\n  }\n}/*# sourceMappingURL=demo.css.map */\n```', 'http://localhost:3000/uploads/file/a12a3c76c4dc3494b84cb5ebd7c9874e.heic', 0, 0, 0, 0, 1, 0, '0000-00-00 00:00:00.000', 1, 1, '2023/07/20/CSS语法扩展之SCSS');
INSERT INTO `blogs` (`id`, `created_at`, `updated_at`, `title`, `abstract`, `content`, `cover`, `read_num`, `comment_num`, `like_num`, `collect_num`, `is_publish`, `is_top`, `top_time`, `category_id`, `user_id`, `link`) VALUES (22, '2023-07-20 20:22:50.698', '2023-07-21 14:43:22.803', 'Git入门', '浅浅的记录一下学习git的笔记，有时间整理精炼一下', '> 【浅浅的记录一下学习git的笔记，有时间整理精炼一下】\n## 1、了解git\n\nGit是一个分布式版本控制系统，用于跟踪和管理软件代码的变化，允许多人协同开发并记录代码修改历史。\n\n## 2、操作\n\n\ngit仓库：本地仓库。远程仓库\n\n```js\n\nhello world!\nGit is a distributed version control system.\nGit is free software.\n\n=================1、初阶===================\n\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n\n\n//第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：\n\nssh-keygen -t rsa -C \"youremail@example.com\"\n//第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容\n\n//初始化\ngit init\n\n//添加到仓库\ngit add \'file.txt\'\n\n//提交并赋予提交信息\ngit commit -m \"add message status\"\n\n//查看提交状态\ngit status \n\n//查看不同\ngit diff \n\n=================2、中阶===================\n\n//查看提交的历史日志\ngit log\ngit log --pretty=oneline //简化版\n\n//在Git中，用HEAD表示当前版本,也就是最新的提交\n\n【2-1版本回退】\n\n//回到上一次提交\n\ngit reset  HEAD~\n//回到上一次提交并永久删除上一次提交（也不是\ngit reset --hard HEAD~\n\n//但是只要终端没有关闭，那么找到当时的id还是可以回溯，版本号没必要写完。\ngit reset --hard b8523\n\n\n//用来记录你的每一次命令,用于寻找被忘记的id\ngit reflog\n\n【2-2工作区和暂存区】\n\n//工作区（workArea）\n//stage暂存区\n//master分支\n//HEAD指向分支的指针\n\n//workArea--add-->stage--commit-->master\n\n【2-3管理修改】\n//因为Git跟踪并管理的是修改，而非文件\n\n【2-4撤销修改】\n//撤销在--工作区--的保存。总之，就是让这个文件回到最近一次git commit或git add时的状态。\ngit checkout -- readme.txt\n\n//可以把--暂存区--的修改撤销掉\ngit reset HEAD readme.txt\n\n【2-5删除文件】\n\n//删除\ngit rm test.txt\n//提交\ngit commit -m \"remove test.txt\"\n\n//撤销工作区的删除\ngit checkout -- test.app\n\n\n【远程仓库】\n//实际情况往往是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。\n\n\n//git分布式版本管理，github仓库，\n//由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要\nssh-keygen -t rsa -C \"youremail@example.com\"\n\n//一路回车\n//如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n//第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：\n\n//然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：\n\n//首先在github上创建空的仓库\n//然后\ngit remote add origin https://github.com/xxx/learngit.git\n\n//\ngit remote add gitee git@gitee.com:liaoxuefeng/learngit.git\ngit remote add github git@gitub.com:liaoxuefeng/learngit.git\n\n//本地分支推送，并且分支版本绑定-u本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\ngit push -u origin master\n\n//详细查看信息\ngit remote -v\n\n//删除远程库\ngit remote rm origin\n\n【分支管理】\n//首先，我们创建dev分支，然后切换到dev分支\ngit checkout -b dev\n\n//git checkout命令加上-b参数表示创建并切换\n//用git branch命令查看当前分支\n//当前分支前面会标一个*号。\n\n//dev分支的工作完成，我们就可以切换回master分支：\ngit checkout master\n\n//dev分支的工作成果合并到master分支上\ngit merge dev\n\n//合并完成后，就可以放心地删除dev分支了：\ngit branch -d dev\n\n//创建并切换到新的dev分支，可以使用：\ngit switch -c dev\n  \n//直接切换到已有的master分支，可以使用：\ngit switch master\n\n  \nGit鼓励大量使用分支：\n/*\n  查看分支：git branch\n\n  创建分支：git branch <name>\n\n  切换分支：git checkout <name>或者git switch <name>\n\n  创建+切换分支：git checkout -b <name>或者git switch -c <name>\n\n  合并某分支到当前分支：git merge <name>\n\n  删除分支：git branch -d <name>\n*/\n  \n//用git log --graph命令可以看到分支合并图。\n//通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。\n//如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。\ngit merge --no-ff -m \"merge with no-ff\" dev\n//准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：\ngit log --graph --pretty=oneline --abbrev-commit\n\n  \n//Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：\ngit stash\n  \n/*\n	main主分支\n	\n	issue-101临时的错误分支\n	\n	dev开发分支\n*/\n  \n//对主分支发生错误时候的处理办法\n  \n  //1.保存当前dev\n  	git stash//git stash -a\n  //2.假定主分支出问题，切换主分支，并创建临时修复分支\n  	git switch master\n  	git switch -c issue-101\n  //3.修复文件\n  	hellw --> hello\n  	git add test.txt\n  	git commit -m \"fix bug 101\"\n  		//[issue-101 4c805e2] fix bug 101\n  //4.修复完成后，切回主分支并进行合并\n  	git switch master\n  	git merge --no-ff -m \"merged bug fix 101\" issue-101//保存临时分支的情况下合并\n  	git branch -d issue-101\n  //5.切换回工作分支\n  	git switch dev\n  	git cherry-pick 4c805e2\n  	//查看stash（非必需）\n  		git stash list\n  \n  	//恢复内容并删除stash\n  \n  		git stash pop//其实可能不用也行\n【多人协作】\n//查看远程库的信息，用git remote\n//用git remote -v显示更详细的信息\n//总的来说，Fetch命令用于从远程仓库获取代码，而Push命令用于将本地代码推送到远程仓库中。两者都是Git中重要的命令，开发人员需要根据具体的需求来选择使用哪个命令。\n  \n  //你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，\n  git checkout -b dev origin/dev\n  //git switch -c dev origin/dev\n  \n  \n  //他人修改，如果push不成功，查看提示，pull后合并，add，commit，然后提交。\n  //在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n  \n【标签管理】\n  //发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。\n  \n  //首先，切换到需要打标签的分支上：\n  git branch\n  git checkout master\n  //然后，敲命令git tag <name>就可以打一个新标签\n  git tag v1.0\n 	//用命令git tag查看所有标签：\n  git tag\n  \n  //显示提交记录\n  	//可视化一点点\n    git log --graph --pretty=oneline --abbrev-commit\n    //行\n    git log --pretty=oneline --abbrev-commit\n  \n  //打标签*\n  git tag v0.9 f52c633\n  \n  //查看标签信息：\n  git show v0.9\n  \n  //还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：\n  git tag -a v0.1 -m \"version 0.1 released\" 1094adb\n  //注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。\n  \n  //如果标签打错了，也可以删除：\n  git tag -d v0.1\n  //因为创建的标签都只存储在本地，[不会自动推送到远程]。所以，打错的标签可以在本地安全删除。\n  //如果要推送某个标签到远程，使用命令git push origin <tagname>：\n	git push origin v1.0\n  //或者，一次性推送全部尚未推送到远程的本地标签：\n  git push origin --tags\n  \n  //如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：\n  git tag -d v0.9\n	//然后，从远程删除。删除命令也是push，但是格式如下：\n  git push origin :refs/tags/v0.9\n\n//关联远程库\n  \n  \n  【.gitingore】\n  //忽略特殊文件\n   git add -f App.class//强制添加\n  //需要找出来到底哪个规则写错了\n  git check-ignore -v App.class\n  /*\n      # 排除所有.开头的隐藏文件:\n      .*\n      # 排除所有.class文件:\n      *.class\n\n      # 不排除.gitignore和App.class:\n      !.gitignore\n      !App.class\n  */\n  //.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！\n  \n  //配置别名\n  git config --global alias.st status\n  \n  $ git config --global alias.co checkout\n  $ git config --global alias.ci commit\n  $ git config --global alias.br branch\n  \n  //撤销提交\n  git revert HEAD//撤销最近一次提交。\n  \n  //撤销暂存区的提交\n  git reset HEAD\n  \n\n```\n\n', 'http://localhost:3000/uploads/file/dc350a427fd082ab29f3d69dfd60ddcc.heic', 0, 0, 0, 0, 1, 0, '0000-00-00 00:00:00.000', 1, 1, '2023/07/20/Git入门');
INSERT INTO `blogs` (`id`, `created_at`, `updated_at`, `title`, `abstract`, `content`, `cover`, `read_num`, `comment_num`, `like_num`, `collect_num`, `is_publish`, `is_top`, `top_time`, `category_id`, `user_id`, `link`) VALUES (23, '2023-07-20 20:26:45.828', '2023-07-21 14:45:46.068', 'Centos7安装mysql8.0.31版本', 'Centos7安装mysql8.0.31版本，从安装到启动，到修改密码全过程。', '# 一、 卸载mariadb\n> 因centos7默认安装了mariadb, 会造成依赖冲突，按下列方式进行卸载:\n```\nrpm -qa | grep mariadb\nrpm -e mariadb-libs --nodeps\nrpm -qa | grep mariadb\n```\n# 二、下载\n```\n# 获取压缩包\nwget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.31-1.el7.x86_64.rpm-bundle.tar\n# 创建文件夹\nmkdir mysql-8.0.31\n# 解压\ntar -xvf mysql-8.0.31-1.el7.x86_64.rpm-bundle.tar -C mysql-8.0.31\n```\n# 三、安装\n```\n yum install -y perl.x86_64\n ```\n # 四、修改/etc/my.cnf\n```\n# 添加如下内容\nlog_timestamps = SYSTEM\n```\n# 五、启动\n```\n# 启动\nsystemctl start mysqld\n# 查看状态\nsystemctl status mysqld\n```\n# 六、修改密码\n```\ncat /var/log/mysqld.log | grep password\n\nmysql -u root -pyourpassword\n\nalter user \'root\'@\'localhost\' identified by \'Root_123\';\n\nuse mysql\n\nselect user, host from user where user=\'root\';\n\nupdate user set host =\'%\' where user=\'root\';\n\nflush privileges;\n\nselect version();\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n \n ', 'http://localhost:3000/uploads/file/4e46fda7b34f2f7270246a8339668ec1.jpg', 2, 0, 5, 0, 1, 0, '0000-00-00 00:00:00.000', 8, 1, '2023/07/20/Centos7安装mysql8.0.31版本');
INSERT INTO `blogs` (`id`, `created_at`, `updated_at`, `title`, `abstract`, `content`, `cover`, `read_num`, `comment_num`, `like_num`, `collect_num`, `is_publish`, `is_top`, `top_time`, `category_id`, `user_id`, `link`) VALUES (24, '2023-07-20 20:30:22.988', '2023-07-21 14:42:32.583', 'Centos7安装redis教程', 'Redis是一个开源的内存数据存储系统，可以用作数据库、缓存和消息队列，具有高性能、灵活性和可扩展性。我们来看看centos7上如何安装redis吧...', '# 一、安装redis\n## 1.1检查是否有redis yum 源\n```\nyum list | grep redis\n```\n## 1.2下载fedora的epel仓库\n> 如果仓库存在，该步骤可忽略\n```\nyum install epel-release\n```\n## 1.3安装redis数据库\n```\nyum install redis\n```\n## 1.4安装完毕后，使用下面的命令启动redis服务\n```\n# 启动redis\nsystemctl start redis\n \n# 停止redis\nsystemctl stop redis\n \n# 查看redis运行状态\nsystemctl status redis\n \n# 重启redis\nsystemctl restart redis\n \n# 查看redis进程\nps -ef | grep redis\n```\n## 1.5设置redis为开机自动启动\n```\nsystemctl enable redis\n```\n## 1.6进入redis服务\n```\n# 进入本机redis\nredis-cli\n \n# 列出所有key\nkeys *\n```\n## 1.7防火墙开放相应端口\n> 没有防火墙，此步骤可忽略\n```\n# 开启6379\n[root@VMTest ~]# /sbin/iptables -I INPUT -p tcp --dport 6379 -j ACCEPT\n \n# 保存\nservice iptables save\n```\n# 二、综合设置(用户名，密码等设置)\n```\n1) 打开配置文件：vi /etc/redis.conf  \n2) 修改默认密码：查找 requirepass， 默认密码为 foobared， 将 foobared 修改为你的密码即可\n3) 找到 bind 127.0.0.1 将其注释，否则redis只允许本机连接\n4) 找到 protected-mode yes 将其改为：protected-mode no  \n5) 重启Redis：systemctl restart redis  \n```\n# 三、使用密码登录\n## 3.1登录\n```\n# 进入redis\nredis-cli\n# 输入密码\nauth yourpassword\n# 查看\nkeys *\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', 'http://localhost:3000/uploads/file/bed1553315cb0696e7f128233e81391c.jpg', 0, 0, 0, 0, 1, 0, '0000-00-00 00:00:00.000', 8, 1, '2023/07/20/Centos7安装redis教程');
INSERT INTO `blogs` (`id`, `created_at`, `updated_at`, `title`, `abstract`, `content`, `cover`, `read_num`, `comment_num`, `like_num`, `collect_num`, `is_publish`, `is_top`, `top_time`, `category_id`, `user_id`, `link`) VALUES (25, '2023-07-20 20:36:19.109', '2023-07-21 14:41:55.434', 'Typora简易教程-Mac版', 'Typora是一款跨平台的所见即所得（WYSIWYG）Markdown编辑器，提供简洁的界面和实时预览功能，使Markdown文档的编写更加直观和便捷。我们来一起掌握快捷的使用方法吧', '\n\n# 1、一级标题\n\n快捷键:Command+1/2/3.../6\n\n# 2、开启源代码模式\n\n快捷键:command+/  \n\n# 3、分割线\n书写方式:---\n\n---\n# 4、代码\n\n单行代码表示方法  `CODE `          快捷键：`*2\n\n多行代码标识							  快捷键：```\n\n```go\nimport \"fmt\"\nfmt.Println(\'helloworld\')\n```\n\n# 5、外部链接\n[链接名称] (链接)                      （使用时删除中括号和小括号之间的间隔）快捷键:Command+K\n\n[百度一下](https://www.baidu.com)    \n\n# 6、内部链接\n[跳转提示] (#1、一级标题)    （使用时删除中括号和小括号之间的间隔）快捷键:Command+K\n[跳转到一级标题](#1、一级标题)\n\n# 7、自动链接\n\n​	使用<>包括URL或邮箱地址会被自动转换为超链接\n​	<https://www.baidu.com>\n  <123@email.com>\n\n# 8、引用和嵌套引用\n\n> 这里可以添加本文要记录的大概内容\n> > 我本将心照明月，奈何明月照沟渠\n> >\n> > **退出引用**：shift+Tab (一般在引用内容写完的下一行使用）\n\n# 9、在线图片\n快捷键:⬆️+Command+I\n\n![盾山](https://game.gtimg.cn/images/yxzj/coming/v2/skins//image/20221102/16673873219321.jpg)\n\n# 10、本地图片\n![go](/Users/thesunalsorises/Desktop/GO.svg)\n\n\n\n\n\n[跳转到一级标题](#1、一级标题)\n\n# 11、无序列表\n\n- 输入-之后输入空格。 按Tab	\n  - 子列表。               按Tab\n    - 子列表。        按Tab\n  \n- 回到上一层。               按Shift+Tab\n\n- 快捷键:Option+Command+U\n\n# 12、有序列表\n\n1. 输入数字+“.”之后输入空格\n\n2. ==退出列表模式:==两次会车enter即可。\n\n3. 快捷键:Option+Command+O\n\n\n# 13、任务列表\n\n- [x] 快捷键Option+Command+X\n\n# 14、生成目录\n\n[TOC]+Enter\n\n[TOC]\n\n# 15、表格\n```\n| 姓名 |  学号  |\n| :--: | :----: |\n| tom | 202201 |\n| Jerry | 202202 |\n```\n创建表格快捷键option+command +T\n\n| 姓名 |  学号  |\n| :--: | :----: |\n| tom | 202201 |\n| Jerry | 202202 |\n\n(注意：\":--------“表示左对齐，”:---------:“表示居中对齐，”----------:\"表示右对齐)\n\n# 16、表情符号\n\n: smile （使用时删除空格）\n\n:smile: :laughing: :dizzy_face: :sob: :cold_sweat: :sweat_smile:  :cry: :triumph: :heart_eyes: :relaxed: :sunglasses: :weary:\n\n:+1: :-1: :100: :clap: :bell: :gift: :question: :bomb: :heart: :coffee: :cyclone: :bow: :kiss: :pray: :sweat_drops: :hankey: :exclamation: :anger:\n\n# 17、文字\n\n|              格式              |   快捷键    |\n| :----------------------------: | :---------: |\n|             删除线             | Ctl+shift+` |\n|           这是*斜体*           |  Command+I  |\n|          这是**加粗**          |  Command+B  |\n|      这是***加粗和斜体***      |   三个***   |\n|       这是<u>下划线</u>        |  Command+U  |\n|  这是用来 ==显示高亮== 的文本  | ⬆️+Command+H |\n| 下标：水 H~2~0、双氧水H~2~O~2~ |      H ~ 2 ~ o(去掉空格)      |\n|    上标：面积^2^、 体积m^3^    |  a^ 数字 ^(去掉空格)  |\n\n# 18、其他快捷键\n\n| 格式 |    快捷键     |\n| :--: | :-----------: |\n| 搜索 |   Command+F   |\n| 大纲 | Ctl+Command+1 |\n|      |               |\n|      |               |\n|      |               |# # ', 'http://localhost:3000/uploads/file/4889d88fba6a863f82d5e5e40dc8ea70.jpg', 1, 0, 0, 0, 1, 0, '0000-00-00 00:00:00.000', 1, 1, '2023/07/20/Typora简易教程-Mac版');
INSERT INTO `blogs` (`id`, `created_at`, `updated_at`, `title`, `abstract`, `content`, `cover`, `read_num`, `comment_num`, `like_num`, `collect_num`, `is_publish`, `is_top`, `top_time`, `category_id`, `user_id`, `link`) VALUES (26, '2023-07-20 20:54:20.106', '2023-07-21 14:46:26.398', 'JavaScript学习笔记（1）', 'JavaScript（JS）是一种高级编程语言，用于在网页上实现交互式和动态的功能，使网页具有更丰富的用户体验和功能。', '# 一、对象\n\n## 1-1函数的上下文（this）是由调用函数的方式决定\n   1. 【规则一】**对象打点**调用它的方法函数，则函数的上下文是这个打点的对象;-->**对象**.函数（）\n\n   2. 【规则二】**圆括号**直接调用函数，则函数的上下文是**window**对象；-->函数()\n\n   3. 【规则三】数组 (**类数组对象**) 枚举出函数进行调用，上下文是这个**数组**（类数组对象）；-->数组[下标] ()\n      1. **`arguments`** 是一个对应于传递给函数的参数的类数组对象。\n\n   4. 【规则四】**IIFE**（立即调用函数,immediately invoked function expression）,上下文是**window**；\n      1. (function(){       })();\n\n   5. 【规则五】**定时器、延时器**调用函数，上下文是**window**对象；\n      1. 定时器：setInterval(函数,时间）\n      2. 延时器：setTimeout(函数,时间）\n\n   6. 【规则六】事件处理函数的上下文是绑定事件的**DOM元素**；\n\n         1. dom元素.onclick = function(){   }\n\n   7. 【规则七】用new调用函数，秘密创建出对象。\n\n   8. call和apply能指定函数上下文\n\n         1. ```\n            function sum(){ this.chinese+this.math+this.english}\n            var obj = {chinese:98,math:98,english:99}\n            sum.call(obj)\n            sum.apply(obj)\n            ```\n\n         2. ```\n            sum.call(obj,5,3) //使用逗号隔离参数\n            ```\n\n         3. ```\n            sum.apply(obj,[5,3]) //把参数写入数组\n            ```\n\n## 1-2 prototype\n\n1. 构造函数的prototype属性是它的实例的原型\n2. 把方法直接添加到实例上的缺点：\n   1. 每个实例的函数都是内存中 不同 的函数，造成内存的浪费。\n   2. 解决办法。把它写到原型链上\n3. 使用javascript特有的原型链特性来实现继承，是普遍的做法。ES6会有新的继承\n   1. Student.prototype = new People();//关键语句实现继承\n   2. 子类的prototype指向父类的实例\n   3. People.call(this,name,age,sex)\n\n## 1-3包装类\n\n1. 包装类的目的就是为了让基本类型值可以从他们的构造函数的prototype上获得方法。\n\n# 二、ES6\n\n## 2-1解构赋值\n\n1. 解析某一数据的结构，提取我们想要的东西，赋值给变量。\n\n2. 应用：arguments和NodeList\n\n3. **数组**的解构赋值\n\n4. ```javascript\n   //默认值结果严格等于underfined时，对应的默认值才会生效\n   const [a,[,,b],c] = [1,[2,3,4],5]\n   console.log(a,b,c)//1,4,5\n   \n   function f1(){return arguments}\n   \n   const [a,b] = f1(1,3,5,7,9)\n   console.log(a,b)//1,3\n   \n   const [p1,p2,p3] = document.querySelectorAll(\'p\')\n   console.log(p1,p2,p3)//<p>1</p> <p>2</p> <p>3</p>\n   \n   const array = [1,2]\n   // const add = arr => arr[0] + arr[1]//麻烦\n   const add = ([x,y]) => x+y\n   console.log(add(array))//3\n   \n   //交换变量\n   let a = 3\n   let b = 4\n   console.log(a,b)\n   [b,a] = [a,b]\n   console.log(a,b)\n   \n   ```\n\n5. **对象**的解构赋值\n\n6. ```js\n   const {username:username,age:age} = {username:\'zs\',age:18}//复杂一点\n   \n   const {username,age} = {username:\'zs\',age:18}//简单一点\n   console.log(username,age)\n   \n   \n   const logUser = ({username=\'zs\',age=18} = {}) =>console.log(username,age)//解构赋值的默认值，参数的默认值\n   logUser()\n   ```\n\n## 2-2剩余参数\n\n1. ```js\n   const add = (...args) =>{console.log(arg)}\n   \n   add(1,2,3,4,5)\n   \n   \n   //剩余参数和解构数组\n   const[a,args] = [1,2,3,4]\n   console.log(a)\n   \n   //剩余参数和解构对象\n   const {x,y,...z} = {a:3,x:4,y:5,b:6}\n   console.log(x,y,z)//剩余参数\n   \n   ```\n\n2. 数组展开运算符的基本用法\n\n   1. ```js\n      console.log(Math.min(...[1,2,4]))\n      \n      //剩余参数和展开运算符区分：\n      \n      const add = (...args)=>{//剩余参数\n        console.log(args)\n        \n        \n        console.log(...args)//展开运算符\n      }\n      ```\n\n   2. ```js\n      //应用\n      //1.复制数组\n      const a = [1,3]\n      const b = [...a]//浅拷贝\n      \n      //2.合并数组\n      const x = [1,2]\n      const y = [3]\n      const z = [4,5]\n      \n      console.log([...x,...y,...z])\n      console.log([0,...x,...y,...z,6])\n      \n      //3.字符串转换数组\n      console.log([...\'alex\'])//1\n      \n      (\'abcc\').split(\'\')//2\n      \n      //4.常见的类数组转化为数组\n      //arguments\n      funttion func(){\n        console.log([...arguments])\n      }\n      func(1,2,3)\n      \n      //NodeList\n      console.log([...document.querySelectorAll(\'p\')].push(\'p\'))\n      ```\n\n3. 对象展开运算符的应用\n\n   1. ```js\n      //剩余参数和展开运算符\n      \n      //1.对象展开\n      const apple = {\n      color:\'red\',shape:\'球形\',taste:\'甜\'\n      }\n      \n      console.log({...apple})\n      //2.对象合并\n      const apple1 = {color:\'red\',shape:\'球形\',taste:\'甜\'}\n      const apple2 = {color:\'red2\',size:\'最大\'}\n      \n      console.log({...apple1,...apple2})//相同属性后者 覆盖 前者\n      ```\n\n   2. ```js\n      //1.空对象的展开\n      展开空对象，没有任何效果\n      //2.非对象的展开\n      如果展开不是对象，则会将其自动转为对戏那个，再将其属性罗列出。\n      \n      字符串可以在数组和对象展开。\n      console.log({...\'alex\'})\n      console.log({...[1,3,4]})\n      \n      //3.对象中对象属性的展开，不会展开对象中的对象属性。\n      ```\n\n   3. ```js\n      //对象展开的实际应用\n      \n      //1.对象复制\n      const a = {x:1,y:2}\n      const b = {...a}\n      \n      console.log(b,b===a)\n      \n      //2.用户参数和默认参数\n      //解构赋值设置默认参数\n      const logUser = ({username:\'zs\',age:18} = {}) = {console.log(username,age)}\n      \n      //\n      const logUser2 = (userParm) =>{\n        const defaultParm ={\n          username:\'ls\',\n          age:\'19\'\n        }\n        \n        //const parm = {...userParm,...defaultParm}\n        //console.log(parm.username,parm.age)\n        \n        const {username,age} =  {...userParm,...defaultParm}\n        console.log(parm.username,parm.age)\n      }\n      ```\n\n   \n\n## 2-3 Set\n\n1. ```js\n   //set是无序、没有重复值的数据集合//没有下标\n   //数组是有序的数据集合\n   \n   const s= new Set();\n   s.add(1)\n   s.add(2)\n   \n   console.log(s)\n   \n   ```\n\n2. ```js\n   //方法\n   \n   const s= new Set();\n   //1-add\n   s.add(1)\n   s.add(2)\n   \n   //2-has\n   console.log(s.has(1))\n   \n   //3-delete\n   s.delete(1)\n   \n   //4-clear\n   s.clear()//清空全部\n   \n   //5-forEach\n   const a = new Set();\n   a.add(1).add(2);\n   \n         a.forEach((value, key, set) => {\n           //set中value = key，set就是a本身\n           console.log(value, key, set, set === a);\n           console.log(this);\n         }, document);\n   \n   //6-size\n   s.size()\n   ```\n\n3. ```js\n   //构造  函数的参数\n   \n   //1.数组\n   const s = new Set([1,2,3])\n   console.log(s)\n   \n   \n   //2.字符串、arguments，NodeList、Set等\n   console.log(new Set(\'hi\'))\n   \n   function func(){console.log(new Set(arguments))};\n   func(1,2,2)\n   \n   console.log(new Set(document.querySelectorAll(\'p\')))\n   \n   const s = new Set([1,2,1])\n   console.log(new Set(s) ===s)\n   console.log(s)\n   ```\n\n4. ```js\n   //注意\n   NaN===NaN//在Set里时true，别的事false\n   \n   //使用情况\n   1.数组去重\n   2.不需要通过下标访问，只需要遍历时\n   3.为了使用Set提供的方法和属性时。\n   ```\n\n5. ```js\n   //应用\n   //1.数组去重\n   const s = new Set([1,2,3,2])\n   console.log(s)\n   \n   //转化为数组\n   forEach\n   //剩余参数\n   console.log([...s])\n   console.log([...new Set([1,2,3,1])])\n   \n   //2.字符串去重\n   const str = new Set(\'acebaec\')\n   console.log([...str].join(\'\'))\n   \n   //3.存放DOM元素\n   const p = new Set(document.querySelectorAll(\'p\'))\n   \n   p.forEach(elem){\n     elem.style.color = \'red\'\n     elem.style.backgroundColor = \'blue\'\n   }\n   \n   ```\n\n## 2-4 Map\n\n1. ```js\n   //1.Map和对象都是键值对的集合\n   \n   const m = new Map()\n   m.set(\'age\',18)\n   console.log(m)\n   \n   //2.两者区别：对象一般用字符串当作键，\n   //而Map\n   //基本数据类型和引用数据类型都可以作为键\n   ```\n\n2. ```js\n   //1.方法\n   \n   //set.如果键存在，则会被新的覆盖\n   const m = new Map();\n   m.set(\'age\',18),set(\'age\',19)\n   \n   //get\n   m.get(\'age\')\n   \n   //has\n   m.has(\'age\')\n   \n   //delete\n   m.delete(\'age\')\n   \n   //clear\n   m.clear()//清空\n   \n   //forEach\n   m.forEach(function(value,key,map){\n     //key是键,value是值\n     console.log(value,key,map===m)\n   })\n   //2.属性\n   //size；对象没有类似属性\n   \n   \n   ```\n\n3. ```js\n   //Map构造函数的参数\n   \n   //1.数组\n   console.log(new Map([\n     [\'name\',\'zs\'],[\'age\',\'18\']\n   ]))//只能传二维数组，且必须体现键值对\n   \n   \n   //2.Set、Map\n   \n   //Set\n   const s = new Set( [\n     [\'name\',\'zs\'],[\'age\',\'18\']\n   ])\n   \n   console.log(new Map(s))//了解\n   \n   //Map\n   const s1 = new Map([\n     [\'name\',\'zs\'],[\'age\',\'18\']\n   ])\n   \n   const s2 = new Map(s1)\n   console.log(s2,s2===s1)//实现复制\n   \n   ```\n\n4. ```js\n   //Map注意事项\n   //1.判断键名是否相同\n   NaN===NaN   true\n   \n   //2.使用情况\n   //如果使用键值对结构，或者需要字符串以外的值做键，使用Map合适。\n   \n   //只有实体才用对象\n   ```\n\n5. ```js\n   //Map的应用\n   \n   const [p1,p2,p3] = document.querySelectorAll(\'p\')\n   console.log(p1,p2,p3)\n   \n   const m1 = new Map();\n   m1.set(p1,\'red\')\n   m1.set(p2,\'green\')\n   m1.set(p3,\'blue\')\n   console.log(m1)\n   \n   const m2 = new Map([\n     [p1,\'red\'],\n     [p2,\'green\'],\n     [p3,\'blue\']\n   ])\n   //Map操作DOM元素\n   m.forEach((color,elem)=>{\n     elem.style.color = color\n   })\n   \n   \n   ```\n\n## 2-5 Iterator和for...of循环\n\n1. ```js\n   //Iterator\n   const it = [1,2][Symbol.iterator]()\n   console.log(it.next())\n   //Symbol.iterator（可遍历对象生成方法）->it(可遍历对象)->it.next()->it.next->...（直到done===true)\n   \n   //遍历数组：for 循环和  forEach方法\n   //遍历对象：for in 循环\n   //Iterator遍历器是一个统一的遍历方法。\n   \n   //for ...of 封装了Iterator\n   \n   let arr  = [1,2,3]\n   //arr.keys()//返回索引的可遍历对象\n   //arr.values()//返回值的可遍历对象\n   for(const item of arr){\n     console.log(item)\n   }\n   \n   \n   //arr.entries()//返回索引和值组成数组的可遍历对象\n   for (const [key,value] of arr.entries()){//使用解构赋值获取数据\n     console.log(key,value)\n   }\n   \n   ```\n\n2. ```js\n   //原生可遍历存在方法Symbol.iterator\n   //数组、字符串、Set、Map、arguments、NodeList\n   \n   //非原生可遍历\n   //一般的对象\n   ```\n\n## 2-6 ES6新增方法\n\n1. ```js\n   //1. includes\n   \n   //判断字符串中是否包含某些字符\n   \n   //第一个参数，包含的子元素\n   console.log(\'abc\'.includes(\'a\'))\n   //第二个参数，从索引位置查找。默认值为0\n   console.log(\'abc\'.includes(\'a\',0))//true\n   console.log(\'abc\'.includes(\'a\',0))false\n   \n   //2.padStart()和padEnd()\n   \n   //补全字符串\n   console.log(\'x\'.padStart(5,\'ab\'))//最大长度，填充内容\n   console.log(\'x\'.padEnd(5,\'ab\'))\n   \n   //最大长度小于字符串长度，不会发生补全\n   //自适应补全。\n   \n   //应用\n   2023-2-27\n   console.log(\'2\'.padStart(2,\'0\'))//以固定格式填充，保证规范\n   2023-02-27\n   \n   //3.trimStart() 和 trimEnd()\n   \n   //清楚首/尾空格，中间不会。\n   console.log(\' a b \'.trimStart())//console.log(\' a b \'.trimLeft())//等同，别名\n   console.log(\' a b \'.trimEnd())//console.log(\' a b \'.trimRight())\n   \n   //清空首尾空格trim()\n   console.log(\' a b c \'.trim())\n   \n   //应用\n   usernameInput.value.trim()!==\'\'//对输入表单清除首尾空格\n   ```\n\n2. ```js\n   //数组 includes\n   console.log([1,2,3].includes(2))//true\n   console.log([1,2,3].includes(\'2\'))//false\n   \n   console.log(NaN === NaN)//false\n   console.log([1,2,NaN].includes(NaN))//true\n   \n   \n   //将其他类型转为数组Array.from()\n   \n   //第一个参数\n   console.log(Array.from(\'str\'))\n   \n   console.log(Array.from(new Set([1,2,2,3])))\n   console.log([...new Set([1,2,2,3])])\n   //1所有可遍历的;字符串、数组、Set、Map、arguements、NodeList\n   //2拥有length属性的任一对象都可以使用\n   \n   //第二个参数，类似数组的map方法，使用函数来逐一处理内容\n   console.log(Array.from(\'33\',value => value*3))\n   console.log(Array.from(\'33\').map(value => value*3))\n   \n   //第三个参数，修改this指向\n   console.log(Array.from(\'33\',function(){\n   		console.log(this)\n   },window))\n   \n   \n   console.log(Array.from(\'33\',function(){\n   		console.log(this)\n   },document))\n   \n   \n   //find()和findIndex()\n   //前者返回找到的一个，返回值；后者返回索引\n   \n   console.log(\n   	[1,2,5,7,9].find(\n     	(value,key,arr) =>{return value >6}\n     )\n   )\n   \n   console.log(\n   	[1,2,5,7,9].findIndex(\n     	(value,key,arr) =>{return value >6}\n     )\n   )\n   //第二个参数\n   console.log(\n   	[1,2,5,7,9].find(\n     	function (value,key,arr) {\n         console.log(this)\n         return value >6\n       },document\n     )\n   )\n   \n   //应用\n   const students = [\n     {name:\'zs1\',sex:\'女\'},{name:\'zs2\',sex:\'男\'},{name:\'zs3\',sex:\'女\'},\n   ]\n   \n   console.log(students.find(value=>value.sex==\'男\'))\n   \n   ```\n\n3. ```js\n   //合并对象Object.assign()\n   const a = {class:\'1\',money:\'100\',love:\'LOL\'}\n   const b = {class:\'2\',like:\'CF\',want:\'climb\'}\n   \n   console.log(Object.assign(a,b))//合并到第一个参数中\n   console.log(Object.assign({},a,b))//合并到新的对象中。\n   \n   \n   //应用：合并默认参数和用户参数\n   \n   const userLogin = userOptions =>{\n     const defaultUser = {\n     name:\'xiaohong\'\n     ,sex:\'男\'\n     ,age:18\n   }\n   const options = Object.assign({},defaultUser,userOptions)\n   console.log(options)\n   }\n   \n   userLogin()\n   userLogin({})\n   userLogin({name:\'zs\'})\n   \n   \n   ```\n\n4. ```js\n   //Object.keys和Object.values()和Object.entries()\n   const person = {\n     name:\'zs\',\n     age:18\n   }\n   \n   //返回值类型为数组，而数组.keys()返回值为Iterator\n   console.log(Object.keys(person))\n   console.log(Object.values(person))\n   console.log(Object.entries(person))\n   \n   //应用\n   //使用for of\n   \n   for (const [key,value ] of Object.entries(person)){\n     console.log(key,value)\n   }\n   ```\n\n## 2-7 Promise\n\n1. ```\n   promise一般用来解决 层层嵌套的回调函数（回调地狱callback hell）的问题\n   ```\n\n2. ```js\n   //1.实例化 构造函数生成实例对象\n   \n   //Promise解决的不是回调函数，而是回调地狱\n   //const p = new Promise(()=>{})//异步\n   \n   //2.Promise状态\n   const p = new Promise((resolve,reject)=>{\n     //3,1pending(未完成) ,2resolve 执行,3reject失败\n     \n     \n   })\n   \n   p.then(\n   	()=>{},\n     ()=>{}\n     //返回值都是new Promise(undefined)\n   )\n   \n   //catch 捕获异常\n   //finally 最终处理\n   \n   //new Promise(resolve=>{resolve(\'foo\')})  <==>  Promise.solve(\'foo\')\n   \n   \n   //Promise.all([p1,p2])//监控状态\n   ```\n\n## 2-8 class\n\n1. ```js\n   //1.class 类\n   class Person{//首字母大写\n   	//实例化时执行构造方法，所以必须有构造方法，但可以不写出来。\n     constructor (name,age){//定义属性\n       this.name = name\n       this.age = age\n     }\n     //各实例共享的方法\n     speak(){\n       console.log(\'speak\')\n     }\n   }\n   \n   //对象 类的实例化\n   const zs = new Person(\'zs\',18)\n   \n   //2.构造函数\n   \n   function Person(name,age){\n     this.name =name \n     this.age = age\n   }\n   Person.prototype.speak = function(){}\n   ```\n\n2. ```js\n   //1.类定义的两种形式\n   //1.1类声明\n   class Person {\n     constructor(){}\n     speak(){}\n   }\n   \n   //1.2表达式形式\n   const Person = class{\n     constructor(){}\n     speak(){}\n   }\n   \n   //立即执行的类\n   new (class{\n     constructor(){\n       console.log(\"123\")\n     }\n   })()\n   ```\n\n3. ```js\n   //1.实例属性、静态方法、静态属性(了解)\n   \n   class Person{\n     age = 18;//实例属性。\n     getName = function(){//实例方法\n      return this.age\n     }\n     \n     \n     constructor(name){\n       this.name = name;//实例属性\n     }\n     speak(){\n       console.log(\'speak\')//实例方法，创建实例调用\n     }\n     \n     static speak(){\n       console.log(\'speak\')//静态方法，通过类直接调用（省去实例化）\n     }\n     \n     //静态属性\n     static version = \'1.0\'//不要这么写，目前是提案，存在兼容性问题\n     \n     static getVersion(){\n       console.log(\'1.0\')//推荐\n     }\n   }\n   \n   //2.私有属性和方法\n   //_开头表示私有\n   \n   this._name = name\n   \n   //将私有属性移出类\n   (function(){\n     let name = \'\'\n     class Person{\n       constructor(username){\n         name = username\n       }\n     }\n   })()\n   ```\n\n4. ```js\n   //继承extends和super\n   \n   class Person{\n     constructor(name,age){\n       this.name = name\n       this.age = name\n     }\n     say(){\n       console.log(\'say\')\n     }\n     static say(){\n       console.log(\'static say\')\n     }\n   }\n   \n   class Programmer extends Person{\n     constructor(name,sex,feature){\n       //1.作为构造方法使用。\n       super(name,sex)//super相当于父类的构造方法。this指向当前实例\n       \n       this.feature = feature\n       \n       //在构造方法或一般方法中使用\n       super.say()//super代表父类的原型对象Person.prototype。this指向当前实例\n     }\n     \n     hi(){\n       console.log(\'hi\')\n     }\n     \n     say(){\n       //2.作为对象使用不能获取构造方法中的属性或方法\n       super.say()//super代表父类的原型对象Person.prototype\n       console.log(\'+++\')\n     }\n     static say(){\n       //3.静态方法中使用\n       super.say()//super指向父类，而不是父类的原型对象。this指向当前的子类，而非实例。\n       console.log(\'===\')\n     }\n     \n   }\n   ```\n\n## 2-8 Module模块\n\n1. ```js\n   //1.模块：一个个局部作用域的代码块\n   \n   //2.模块系统\n   \n   //1.模块化的问题，2消除全局变量，3.管理加载顺序\n   //ES Module\n   \n   \n   //type=\'module\'模块导入必填项\n   <script src = \'./module.js\' type=\'module\'></script>\n   ```\n\n2. ```js\n   //导入和导出。\n   //\n   export defalt xxx ; import bbb from \'./index.js\'\n   \n   // 1单个导出\n   export const age = 18 ; import {age} from \'./index.js\'//不能随意命名\n   \n   const age = 18;\n   export age ;//错误\n   export {age} ; import {age} from \'./index.js\'\n   \n   //2多个导出\n   function fn(){}\n   class ClassName{}\n   class age = 18\n   \n   export {fn,ClassName,age}; import {fn,ClassName,age} from \'./index.js\'\n   \n   //3起别名\n   //fn as f //导入和导出同理\n   \n   //4整体导入\n   export {fn as func,ClassName,age};  import * as obj from \'index.js\'\n   \n   //5同时导入\n   export {fn as func,ClassName,age};\n   export const age = 18 ;\n   \n   import age ,{fn as func,ClassName,age} from \"./index.js\"\n   ```\n\n3. ```js\n   //Module注意事项\n   \n   //1.this指向\n   console.log(this)\n   \n   //顶层的this指向undefined\n   \n   //2.import和import（）\n   //import命令具有提升效果，会提升到整个模块头部，率先执行。\n   \n   //impot（）可以按需导入\n   \n   //3.导入导出的复合写法//改写法导出的无法在当前模块使用\n   export {age} from \'./index.js\'\n   等价<==>等价\n   import {age} from \'./index.js\'\n   export {age} from \'./index.js\'\n   ```\n\n## 2-9 Babel\n\n1. ```js\n   //1.Babel是JS的编译器，用来将ES6的代码，转换成为ES6之前的代码\n   //2.但是对于新增的API无法转译，所以要借助webpack\n\n2. ```js\n   //Babel的使用方式\n   //初始化项目\n   npm init ->package.json\n   //安装\n   npm install --save-dev @babel/core@7.11.0 @babel/cli@7.10.5\n   //设置\n   \"scripts\": {\n       \"build\": \"babel src -d dist\"//将src目录的js编译到dist目录下 -d ==> -out-dir输出\n   },//启动npm run build\n     \n     \n   //转换语法的方式\n   npm install @babel/preset-env@7.11.0 --save-dev\n   \n   ```\n\n## 2-10 Webpack\n\n1. ```js\n   //webpack是[静态]模块打包器，当webpack处理应用程序时，会将所有这些模块打包成一个或多个文件。\n   \n   //静态：存在本地的js/css/图片/字体\n   \n   //1.初始化\n   npm init\n   \n   //2.安装webpack需要的包\n   npm install --save-dev webpack-cli@3.3.12 webpack@4.44.1\n   \n   //3.配置\n   \n   //配置文件webpack.config.js\n   const path = require(\'path\');\n   \n   module.exports = {\n     entry: \'./src/index.js\',\n     output: {\n       path: path.resolve(__dirname, \'dist\'),\n       filename: \'bundle.js\',\n     },\n   };\n   \n   //脚本配置，npm run webpack\n   \"scripts\": {\n       \"webpack\": \"webpack --config webpack.config.js\"\n   },\n   ```\n\n2. ```js\n   //webpack核心概念\n   \n   //1.entry\n   \n   //指定入口文件\n   //单入口\n   entry: \'./src/index.js\',\n   //多入口\n   entry:{\n     main:\"./src/index.js\",\n     search:\"./src/search.js\"\n   }\n   \n   //2.output\n   //单入口\n   output: {\n       path: path.resolve(__dirname, \'dist\'),//目录名，输出文件夹名称\n       filename: \'bundle.js\',//输出文件名\n   },\n   //多入口\n   output: {\n       path: path.resolve(__dirname, \'dist\'),//目录名，输出文件夹名称\n       filename: \'[name].js\',//输出文件名\n   }, \n   //3.loader\n   //loader让webpack能够处理那些非JS文件的模块。js也能。\n   //babel-loader：webpack和babel之间连接的接口\n   npm install --save-dev babel-loader@8.1.0 @babel/core@7.11.0 @babel/preset-env@7.11.0\n   \n   //有些不能转译的，使用补充的包。\n   npm install --save-dev core-js@3.6.5\n   import \"core-js/stable\"\n   \n   npm run webpack\n   //4.plugins\n   \n   //https://www.webpackjs.com/plugins/\n   \n   //包括打包html\n   npm install --save-dev html-webpack-plugin@4.3.0\n   //配置\n   \n   plugins: [\n       //单入口和多入口根据数量\n       new HtmlWebpackPlugin({\n         template: \'./index.html\',\n         filename: \'index.html\',\n         chunks: [\'index\'], //引入的js文件\n         minify: {\n           removeComments: true, //删除注释\n           collapseWhitespace: true, //删除空格\n           removeAttributeQuotes: true, //删除标签属性值的双引号\n         },\n       }),\n       new HtmlWebpackPlugin({\n         template: \'./search.html\',\n         filename: \'search.html\',\n         chunks: [\'search\'],\n       }),\n     ],\n     \n     \n     //包括打包css\n     \n     npm install --save-dev css-loader@4.1.1//帮助webpack识别css\n   	npm install --save-dev style-loader@1.2.1//把 CSS 插入到 DOM 中。通过style的方式\n   	npm install --save-dev mini-css-extract-plugin@0.9.0//通过style引入\n   	// 配置\n      module: {\n       rules: [\n         {\n           test: /\\.css$/,\n           // use: [\'style-loader\', \'css-loader\'],//通过style引入\n           use: [MiniCssExtractPlugin.loader, \'css-loader\'], //通过link引入\n         },\n       ],\n     },\n     \n   //使用file-loader处理本地的css中的图片，远程的webpack不用处理。\n   npm install --save-dev file-loader@6.0.0\n   \n   //复制+修改路径\n   \n   //处理html中图片\n   //npm install --save-dev html-withimg-loader@0.1.16//解析html\n   //然后使用fileloader来解析图片\n       \n   //高级使用url-loader处理图片\n   \n   npm install --save-dev url-loader@4.1.0\n   \n   //搭建开发环境（自动打包）//内存中//服务器\n   npm install --save-dev webpack-dev-server@3.11.0\n   ```', 'http://localhost:3000/uploads/file/4892c1f5b2a5e417d499367ff2d0e511.jpg', 6, 0, 0, 0, 1, 0, '0000-00-00 00:00:00.000', 1, 1, '2023/07/20/JavaScript学习笔记（1）');
INSERT INTO `blogs` (`id`, `created_at`, `updated_at`, `title`, `abstract`, `content`, `cover`, `read_num`, `comment_num`, `like_num`, `collect_num`, `is_publish`, `is_top`, `top_time`, `category_id`, `user_id`, `link`) VALUES (27, '2023-07-20 20:58:47.937', '2023-07-21 14:41:33.515', 'JavaScript学习笔记（2）', 'JavaScript（JS）是一种高级编程语言，用于在网页上实现交互式和动态的功能，使网页具有更丰富的用户体验和功能。', '#  1-变量\n\n1. 变量声明的提升\n\n   - 原因：js执行前会有预编译，预解析阶段，此时会读取变量的定义，造成提升的现象。只提升定义，不提升值。所以会出现undefined现象\n\n   - 指的是先使用，再声明。\n     - 注意：不会引发异常\n       - 但是只提升定义，不提升值\n\n# 2-数据类型\n\n## 2-1基本数据类型\n\nNumber、String、Boolean、Undefined、Null\n\n## 2-2复杂数据类型\n\n- Object、Array、Function、RegExp、Date、Map、Set等等\n\n## 2-3补充\n\n1. typeof:\n\n   1. 数据类型检测\n   2. null检测结果是object\n\n2. NaN:\n\n   1. `数值类型`的值\n   2. 不是一个数（0/0的结果）\n   3. 非0的数字除以0\n      1. 4/0  Infinity 无穷\n\n3. 不区分单/双引号\n\n4. Number()\n\n   1. Number(unfined)=NaN\n   2. Number(null)=0\n\n5. parseInt()\n\n   1. 截断小数点后\n\n6. prompt（）\n\n   1. 提示输入\n\n7. alert（）\n\n   1. 警告框\n\n8. Boolean(\'false\')\n\n   1. 非空字符串都为true\n\n9. toFixed():保留指定的小数位\n\n10. Math.ceil()想上取整，Math.floor()向下取整\n\n11. == 和=== \n\n    1. ```\n       undefined == null(值相同)   //true\n       undefined ===null（类型不同）//false\n       ```\n\n12. 随机数函数\n\n    1. ```	+1\n       [a,b]区间的整数\n       parseInt(Math.random()*(b-a+1))+a\n       ```\n\n13. 数组方法\n\n    1. push:尾部插入\n\n    2. pop:尾部删除\n\n    3. unshift：头插入\n\n    4. shift:头删除\n\n    5. splice:拼接，（start,delcount,item1,item2）,【改变原数组】\n\n       1. arr.splice(n,1)删除一项\n\n    6. slice：截取,(start,end),不包括end等于[a,b)。【不改变原数组】，返回截取的内容\n\n    7. join:数组转为字符串，空字符串等价toString。参数可为空\n\n    8. split：字符串转为数组。参数不可为空。以什么为标志来分割\n\n       1. \'abcde\'.split(\'\')：空字符串参数法将字符串转为数组\n\n    9. concat()：合并多个数组。arr1.concat(arr2,arr3).【不改变原数组】\n\n    10. reverse:数组顺序反转。【改变原数组】\n\n    11. indeOf:返回位置。不存在则返回-1。搜索数组元素。\n\n    12. includes:返回布尔值。判断是否包含指定元素\n\n    13. sort()数组排序\n\n    14. 深拷贝\n\n        1. ```js\n           function deepClone(arr) {\n                   var result = []\n                   for (var i = 0; i < arr.length; i++) {\n                     if (Array.isArray(arr[i])) {\n                       result.push(deepClone(arr[i]))\n                     } else {\n                       result.push(arr[i])\n                     }\n                   }\n                   return result\n                 }\n           ```\n\n14. 闭包\n\n    ```js\n    // 闭包是指函数和其相关的引用环境的组合，使得函数可以访问其定义时所处的词法作用域中的变量，即使函数在词法作用域之外被调用。\n    function createCheckTemp(standardTemp) {\n                function checkTemp(n) {\n                  if (n <= standardTemp) {\n                    alert(\'success\')\n                  } else {\n                    alert(\'fail\')\n                  }\n                }\n                return checkTemp\n              }\n        \n              var a = createCheckTemp(37.3)\n              a(37.2)\n    ```\n\n    ', 'http://localhost:3000/uploads/file/5dfd0d5cbcdf6fc1dbfa4b8ff567f456.jpg', 0, 0, 0, 0, 1, 0, '0000-00-00 00:00:00.000', 1, 1, '2023/07/20/JavaScript学习笔记（2）');
COMMIT;

-- ----------------------------
-- Table structure for categories
-- ----------------------------
DROP TABLE IF EXISTS `categories`;
CREATE TABLE `categories` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `name` varchar(18) DEFAULT NULL,
  `cover` longtext,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of categories
-- ----------------------------
BEGIN;
INSERT INTO `categories` (`id`, `created_at`, `updated_at`, `name`, `cover`) VALUES (1, '2023-06-04 18:46:44.777', '2023-07-20 18:01:51.137', '前端', 'http://myblog.centos8.com/uploads/file/8a4b25111b599d75f4c913642b08d8da.webp');
INSERT INTO `categories` (`id`, `created_at`, `updated_at`, `name`, `cover`) VALUES (2, '2023-06-04 18:46:51.013', '2023-07-20 18:01:40.013', '后端', 'http://myblog.centos8.com/uploads/file/232b23890f134d381c81f88a9da8dfe7.webp');
INSERT INTO `categories` (`id`, `created_at`, `updated_at`, `name`, `cover`) VALUES (8, '2023-07-01 17:01:03.530', '2023-07-20 18:02:13.429', 'Centos', 'http://myblog.centos8.com/uploads/file/49ea04ce6fb6f5ca33a7e38651a45631.webp');
INSERT INTO `categories` (`id`, `created_at`, `updated_at`, `name`, `cover`) VALUES (12, '2023-07-01 17:37:09.238', '2023-07-20 18:02:32.530', 'Go', 'http://myblog.centos8.com/uploads/file/b9d60d4f81358bd2a648dcc830acb2fa.webp');
COMMIT;

-- ----------------------------
-- Table structure for collects
-- ----------------------------
DROP TABLE IF EXISTS `collects`;
CREATE TABLE `collects` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `blog_id` int(6) DEFAULT NULL,
  `user_id` int(6) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=107 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of collects
-- ----------------------------
BEGIN;
INSERT INTO `collects` (`id`, `created_at`, `updated_at`, `blog_id`, `user_id`) VALUES (29, '2023-06-29 16:16:38.202', '2023-06-29 16:16:38.202', 5, 1);
INSERT INTO `collects` (`id`, `created_at`, `updated_at`, `blog_id`, `user_id`) VALUES (30, '2023-06-29 16:16:41.067', '2023-06-29 16:16:41.067', 4, 1);
INSERT INTO `collects` (`id`, `created_at`, `updated_at`, `blog_id`, `user_id`) VALUES (33, '2023-06-29 16:16:48.623', '2023-06-29 16:16:48.623', 1, 1);
INSERT INTO `collects` (`id`, `created_at`, `updated_at`, `blog_id`, `user_id`) VALUES (104, '2023-07-19 09:56:24.046', '2023-07-19 09:56:24.046', 13, 1);
INSERT INTO `collects` (`id`, `created_at`, `updated_at`, `blog_id`, `user_id`) VALUES (105, '2023-07-19 10:43:24.624', '2023-07-19 10:43:24.624', 12, 1);
INSERT INTO `collects` (`id`, `created_at`, `updated_at`, `blog_id`, `user_id`) VALUES (106, '2023-07-20 18:25:54.163', '2023-07-20 18:25:54.163', 19, 1);
COMMIT;

-- ----------------------------
-- Table structure for comment_opens
-- ----------------------------
DROP TABLE IF EXISTS `comment_opens`;
CREATE TABLE `comment_opens` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `is_open` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of comment_opens
-- ----------------------------
BEGIN;
INSERT INTO `comment_opens` (`id`, `created_at`, `updated_at`, `is_open`) VALUES (3, '2023-06-10 16:04:19.132', '2023-07-18 22:34:11.118', 1);
COMMIT;

-- ----------------------------
-- Table structure for comments
-- ----------------------------
DROP TABLE IF EXISTS `comments`;
CREATE TABLE `comments` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `content` mediumtext,
  `user_id` int(6) DEFAULT NULL,
  `page_type` int(6) DEFAULT NULL,
  `page` varchar(200) DEFAULT NULL,
  `is_admin` tinyint(1) DEFAULT NULL,
  `father_id` int(6) DEFAULT NULL,
  `panel_id` int(6) DEFAULT NULL,
  `ip_address` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=131 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of comments
-- ----------------------------
BEGIN;
INSERT INTO `comments` (`id`, `created_at`, `updated_at`, `content`, `user_id`, `page_type`, `page`, `is_admin`, `father_id`, `panel_id`, `ip_address`) VALUES (129, '2023-07-20 18:02:04.399', '2023-07-20 18:02:04.399', '欢迎大家来评论呀😀', 1, 3, 'about', 1, 0, 0, '内网IP');
INSERT INTO `comments` (`id`, `created_at`, `updated_at`, `content`, `user_id`, `page_type`, `page`, `is_admin`, `father_id`, `panel_id`, `ip_address`) VALUES (130, '2023-07-20 18:02:36.495', '2023-07-20 18:02:36.495', '欢迎大家互相交换友链', 1, 2, 'friendlink', 1, 0, 0, '内网IP');
COMMIT;

-- ----------------------------
-- Table structure for friend_links
-- ----------------------------
DROP TABLE IF EXISTS `friend_links`;
CREATE TABLE `friend_links` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `name` varchar(50) DEFAULT NULL,
  `description` varchar(50) DEFAULT NULL,
  `logo` varchar(200) DEFAULT NULL,
  `url` varchar(200) DEFAULT NULL,
  `is_top` tinyint(1) DEFAULT NULL,
  `top_time` datetime(3) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of friend_links
-- ----------------------------
BEGIN;
INSERT INTO `friend_links` (`id`, `created_at`, `updated_at`, `name`, `description`, `logo`, `url`, `is_top`, `top_time`) VALUES (12, '2023-07-20 14:42:38.942', '2023-07-20 15:23:15.912', '文心一言', '一个人工智能语言模型，为用户提供有用信息，帮助用户完成创作', 'https://nlp-eb.cdn.bcebos.com/logo/logoErnieBot.png', 'https://yiyan.baidu.com/', 1, '2023-07-20 15:23:15.912');
INSERT INTO `friend_links` (`id`, `created_at`, `updated_at`, `name`, `description`, `logo`, `url`, `is_top`, `top_time`) VALUES (13, '2023-07-20 14:49:11.395', '2023-07-20 15:21:45.542', 'Acro Design', '前端 UI 组件库', 'https://avatars.githubusercontent.com/u/64576149?s=200&v=4', 'https://arco.design/', 0, '0000-00-00 00:00:00.000');
INSERT INTO `friend_links` (`id`, `created_at`, `updated_at`, `name`, `description`, `logo`, `url`, `is_top`, `top_time`) VALUES (16, '2023-07-20 15:21:37.606', '2023-07-20 15:21:42.411', 'Ant Design', '前端 UI 组件库', 'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg', 'https://ant-design.antgroup.com/index-cn', 0, '0000-00-00 00:00:00.000');
INSERT INTO `friend_links` (`id`, `created_at`, `updated_at`, `name`, `description`, `logo`, `url`, `is_top`, `top_time`) VALUES (17, '2023-07-20 15:22:54.872', '2023-07-20 15:38:41.340', 'Element Plus', '基于 Vue 3，面向设计师和开发者的组件库', 'https://element-plus.org/images/element-plus-logo.svg', 'https://element-plus.org/zh-CN/', 0, '0000-00-00 00:00:00.000');
INSERT INTO `friend_links` (`id`, `created_at`, `updated_at`, `name`, `description`, `logo`, `url`, `is_top`, `top_time`) VALUES (18, '2023-07-20 15:25:20.043', '2023-07-20 15:27:19.010', 'LeiaPix', '图片转换器（2D-->3D）', 'https://convert.leiapix.com/assets/leiapix_logo.7d234669.svg', 'https://convert.leiapix.com/', 1, '2023-07-20 15:27:19.010');
INSERT INTO `friend_links` (`id`, `created_at`, `updated_at`, `name`, `description`, `logo`, `url`, `is_top`, `top_time`) VALUES (19, '2023-07-20 15:27:12.143', '2023-07-20 15:27:12.143', 'Saasaitools', '生成式AI工具目录', 'https://saasaitools.com/storage/2022/11/saasaitools_logo_white.png', 'https://saasaitools.com/', 1, '2023-07-20 15:27:12.143');
INSERT INTO `friend_links` (`id`, `created_at`, `updated_at`, `name`, `description`, `logo`, `url`, `is_top`, `top_time`) VALUES (20, '2023-07-20 15:35:04.574', '2023-07-20 15:35:04.574', 'ChatGPT', 'OpenAI研发的聊天机器人程序', 'https://img0.baidu.com/it/u=3766917767,3481574718&fm=253&fmt=auto&app=120&f=JPEG?w=640&h=406', 'https://chat.openai.com/', 1, '2023-07-20 15:35:04.574');
INSERT INTO `friend_links` (`id`, `created_at`, `updated_at`, `name`, `description`, `logo`, `url`, `is_top`, `top_time`) VALUES (22, '2023-07-20 15:41:34.063', '2023-07-20 15:41:34.063', 'Vue.js', '渐进式 JavaScript 框架', 'https://cn.vuejs.org/logo.svg', 'https://cn.vuejs.org/', 0, '0000-00-00 00:00:00.000');
INSERT INTO `friend_links` (`id`, `created_at`, `updated_at`, `name`, `description`, `logo`, `url`, `is_top`, `top_time`) VALUES (23, '2023-07-20 15:43:40.629', '2023-07-20 15:43:40.629', 'Vue Router', '它与 Vue.js 核心深度集成，让用 Vue.js 构建单页应用变得轻而易举', 'https://router.vuejs.org/logo.svg', 'https://router.vuejs.org/zh/introduction.html', 0, '0000-00-00 00:00:00.000');
INSERT INTO `friend_links` (`id`, `created_at`, `updated_at`, `name`, `description`, `logo`, `url`, `is_top`, `top_time`) VALUES (24, '2023-07-20 15:45:38.173', '2023-07-20 15:45:38.173', 'Pinia', '符合直觉的  Vue.js 状态管理库', 'https://pinia.vuejs.org/logo.svg', 'https://pinia.vuejs.org/zh/', 0, '0000-00-00 00:00:00.000');
INSERT INTO `friend_links` (`id`, `created_at`, `updated_at`, `name`, `description`, `logo`, `url`, `is_top`, `top_time`) VALUES (25, '2023-07-20 15:46:17.994', '2023-07-20 15:46:17.994', 'Vite', '下一代的前端工具链', 'https://cn.vitejs.dev/logo.svg', 'https://cn.vitejs.dev/', 0, '0000-00-00 00:00:00.000');
INSERT INTO `friend_links` (`id`, `created_at`, `updated_at`, `name`, `description`, `logo`, `url`, `is_top`, `top_time`) VALUES (26, '2023-07-20 15:48:58.912', '2023-07-20 15:48:58.912', 'TypeScript', 'TypeScript是带有类型语法的JavaScript。', 'https://www.typescriptlang.org/favicon.ico', 'https://www.typescriptlang.org/zh/', 0, '0000-00-00 00:00:00.000');
INSERT INTO `friend_links` (`id`, `created_at`, `updated_at`, `name`, `description`, `logo`, `url`, `is_top`, `top_time`) VALUES (27, '2023-07-20 16:36:27.754', '2023-07-20 16:37:03.842', '天行数据', '一个优秀的互联网开放式API平台', 'https://www.tianapi.com/static/img/logo.png', 'https://www.tianapi.com/', 1, '2023-07-20 16:37:03.842');
INSERT INTO `friend_links` (`id`, `created_at`, `updated_at`, `name`, `description`, `logo`, `url`, `is_top`, `top_time`) VALUES (28, '2023-07-20 16:38:52.927', '2023-07-20 16:39:04.742', '聚合数据', '一家基于API技术的综合性数据处理服务商。', 'https://img.juhe.cn/www/v10/header/juhelogo-black.svg', 'https://www.juhe.cn/', 1, '2023-07-20 16:39:04.742');
INSERT INTO `friend_links` (`id`, `created_at`, `updated_at`, `name`, `description`, `logo`, `url`, `is_top`, `top_time`) VALUES (29, '2023-07-20 16:42:32.359', '2023-07-20 16:42:38.687', '郭隆邦_技术博客', 'WebGL、Three.js技术分享', 'http://www.yanhuangxueyuan.com/favicon.png', 'http://www.yanhuangxueyuan.com/', 1, '2023-07-20 16:42:38.687');
COMMIT;

-- ----------------------------
-- Table structure for infos
-- ----------------------------
DROP TABLE IF EXISTS `infos`;
CREATE TABLE `infos` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `content` mediumtext,
  `type_id` int(6) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of infos
-- ----------------------------
BEGIN;
INSERT INTO `infos` (`id`, `created_at`, `updated_at`, `content`, `type_id`) VALUES (31, '2023-06-11 16:20:34.747', '2023-07-21 14:48:47.707', '{\"code\":200,\"msg\":\"success\",\"result\":{\"list\":[{\"hotindex\":11662383,\"label\":3,\"word\":\"景海鹏15年4次飞天终于出舱了\"},{\"hotindex\":11563583,\"label\":4,\"word\":\"陈数演女老板自掏5000万救公司\"},{\"hotindex\":10983137,\"label\":3,\"word\":\"为中国女足加油\"},{\"hotindex\":10811455,\"label\":3,\"word\":\"香港首宗“侮辱国歌罪”定罪案件\"},{\"hotindex\":10525284,\"label\":3,\"word\":\"地球连续35年收神秘规律性信号\"},{\"hotindex\":10202231,\"label\":3,\"word\":\"重庆暴雨\"},{\"hotindex\":9553727,\"label\":8,\"word\":\"封神新妲己娜然入驻抖音\"},{\"hotindex\":9461705,\"label\":3,\"word\":\"街道办回应狗头萝莉卖煎饼被举报\"},{\"hotindex\":9457205,\"label\":0,\"word\":\"被杨紫挖过鼻孔的男艺人\"},{\"hotindex\":9148742,\"label\":0,\"word\":\"iPhone 15或延后上市\"},{\"hotindex\":8999590,\"label\":0,\"word\":\"警方通报男子当街捅死2人\"},{\"hotindex\":8913466,\"label\":0,\"word\":\"活死人村晚\"},{\"hotindex\":8698704,\"label\":0,\"word\":\"唐尚珺：未填补录准备回家\"},{\"hotindex\":8636479,\"label\":0,\"word\":\"涂磊为被家暴16次女子发声\"},{\"hotindex\":8625790,\"label\":0,\"word\":\"青年入伍后拒服兵役受5项处罚\"},{\"hotindex\":8594180,\"label\":3,\"word\":\"官方通报女子桥洞避雨被冲走\"},{\"hotindex\":8592299,\"label\":1,\"word\":\"男子称海上钓鱼钓到“飞机”\"},{\"hotindex\":8583732,\"label\":1,\"word\":\"杨洋\"},{\"hotindex\":8541991,\"label\":0,\"word\":\"南航回应机票近4万只有1瓶水\"},{\"hotindex\":8500232,\"label\":0,\"word\":\"托特向张帅道歉\"},{\"hotindex\":8479207,\"label\":0,\"word\":\"封神新妲己设定\"},{\"hotindex\":8409530,\"label\":1,\"word\":\"长安三万里被这位教授讲明白了\"},{\"hotindex\":8338352,\"label\":1,\"word\":\"43头野象出没云南磨憨\"},{\"hotindex\":8314864,\"label\":0,\"word\":\"封神第一部评分\"},{\"hotindex\":8302619,\"label\":5,\"word\":\"超能一家人好看又好笑\"},{\"hotindex\":8274590,\"label\":0,\"word\":\"今年第5号台风杜苏芮生成\"},{\"hotindex\":8258196,\"label\":0,\"word\":\"烦念 王者摆烂\"},{\"hotindex\":8234761,\"label\":0,\"word\":\"李玟讣闻公开丧礼细节安排\"},{\"hotindex\":8195003,\"label\":8,\"word\":\"电影零号追杀上线\"},{\"hotindex\":8193986,\"label\":1,\"word\":\"中考疑被偷分事件将鉴定笔迹\"},{\"hotindex\":8107406,\"label\":0,\"word\":\"安乐传假帝梓元身份暴露\"},{\"hotindex\":8073936,\"label\":3,\"word\":\"印度两女子被迫赤裸游街遭轮奸\"},{\"hotindex\":8061310,\"label\":0,\"word\":\"只是离婚的关系开播\"},{\"hotindex\":8051470,\"label\":0,\"word\":\"缉毒警退休警嫂朋友圈破防了\"},{\"hotindex\":8032416,\"label\":3,\"word\":\"官方通报“清廉餐”：全面整改\"},{\"hotindex\":8027932,\"label\":0,\"word\":\"茶啊二中师生情真实存在吗\"},{\"hotindex\":7993347,\"label\":5,\"word\":\"杨澄是王莹的救赎吧\"},{\"hotindex\":7981422,\"label\":0,\"word\":\"EDG淘汰WE\"},{\"hotindex\":7976428,\"label\":0,\"word\":\"中炬高新回应姚振华进厂被拦\"},{\"hotindex\":7950207,\"label\":0,\"word\":\"女足世界杯开赛\"},{\"hotindex\":7929116,\"label\":0,\"word\":\"君心难逑开播\"},{\"hotindex\":7919825,\"label\":3,\"word\":\"俞敏洪称儿子实习每天工作18小时\"},{\"hotindex\":7887627,\"label\":0,\"word\":\"白宫回应基辛格会见中防长\"},{\"hotindex\":7866973,\"label\":1,\"word\":\"王迅说演不过八角笼中小演员\"},{\"hotindex\":7857345,\"label\":0,\"word\":\"潮州消防 灭火器不是玩具\"},{\"hotindex\":7807018,\"label\":3,\"word\":\"陈数新剧手拿复仇剧本\"},{\"hotindex\":7806074,\"label\":0,\"word\":\"多地共青团发文声援宋雨琦\"},{\"hotindex\":7785302,\"label\":1,\"word\":\"和平精英攻桥模式\"},{\"hotindex\":7754136,\"label\":5,\"word\":\"王传君捧脸杀张艺兴\"},{\"hotindex\":7745483,\"label\":0,\"word\":\"一觉醒来卧室变成水帘洞\"}]}}', 1);
INSERT INTO `infos` (`id`, `created_at`, `updated_at`, `content`, `type_id`) VALUES (32, '2023-06-11 16:20:35.096', '2023-07-21 14:48:47.902', '{\"code\":200,\"msg\":\"success\",\"result\":{\"list\":[{\"title\":\"甄子丹意大利办盛大婚礼\",\"hotnum\":8937109,\"digest\":\"7月21日，据港媒报道，香港功夫巨星甄子丹晒出一组美照，分享自己与老婆汪诗诗在意大利举办盛大婚礼的画面，现场众星云集，引发网友热议。\"},{\"title\":\"00后以抑郁为由拒服兵役\",\"hotnum\":8124646,\"digest\":\"7月19日，河北文安县政府征兵办公室发布刘某业拒服兵役的情况通报，其以心理抑郁伴有自杀念头为由，请求退兵，经多次思想工作无果，被武警某部队除名。\"},{\"title\":\"丈夫为鼓励妻子产后恢复走一步发100\",\"hotnum\":6227975,\"digest\":\"近日，吉林一男子为鼓励剖腹产妻子产后修复，每走一步给100元。丈夫称，妻子是刚做完手术需要多活动，但妻子说刀口会疼，自己就想着让她下床多运动。\"},{\"title\":\"飞机延误6小时发现金 乘客：消气了\",\"hotnum\":4758896,\"digest\":\"7月19日，一飞机因天气原因延误6个半小时，登机时工作人员发现金补贴。乘客：收了钱气都消了，最简单最直接的方式。\"},{\"title\":\"男孩烧书引起失火从18楼跳下\",\"hotnum\":4210026,\"digest\":\"7月19日，网传湖南沅江市一13岁男孩晚十点左右，在家烧书引起失火，随后从18楼跳下。\"},{\"title\":\"被北大录取女生分享经验强调没手机\",\"hotnum\":4169569,\"digest\":\"7月19日，山东济南一姑娘被北京大学外国语学院录取，分享经验时表示，到现在还没有属于自己的手机，她称：老师、家长帮忙管一下手机还是能有所帮助的。\"},{\"title\":\"人民网评高铁被举报偷工减料\",\"hotnum\":3586924,\"digest\":\"近日，山东莱荣高铁被实名举报偷工减料，对此，人民网评论：需用详尽调查还原真相，谁偷工减料谁就吃不了兜着走，谁敢挑战法律谁就该承担代价。\"},{\"title\":\"地球连续35年收到神秘规律性信号\",\"hotnum\":3428874,\"digest\":\"近日，有研究人员指出，地球连续35年收到神秘规律性信号，每次持续5分钟，间隔17分钟，电波性质不符合已知理论。\"},{\"title\":\"私家车因轮胎有泥被城管锁胎禁止上路\",\"hotnum\":2952001,\"digest\":\"7月20日，贵州黔南。网友发视频称，车辆在从江县高铁站被城管锁胎，理由是轮胎有泥禁止上路。21日，城管局回应：确有此规定，口头教育后放行。\"},{\"title\":\"街道办回应狗头萝莉卖煎饼遭举报\",\"hotnum\":2870380,\"digest\":\"近日，网红狗头萝莉卖煎饼称被举报伤风败俗，事件在网上持续发酵，引起众多讨论。南京市秦淮区朝天宫街道办事处一工作人员称，其主要原因是卫生不符合规定。\"},{\"title\":\"孩子躺游戏车前遭亲戚家孩子碾压\",\"hotnum\":2512467,\"digest\":\"7月19日，广东一网友发视频称自己的孩子遭亲戚家孩子开玩具车多次碾压，而大人在一旁玩手机没有及时阻止。不少网友表示：要是真车就完了。\"},{\"title\":\"女子阻拦丈夫教育孩子遭婆婆扇耳光\",\"hotnum\":2464528,\"digest\":\"7月18日，信阳一女子发视频称被婆婆家暴。20日，当事人张女士称，当时丈夫在教育孩子，自己拦了一下，婆婆听到后找她理论并扇她耳光。目前准备带孩子搬离。\"},{\"title\":\"重庆暴雨开车如开船\",\"hotnum\":2412710,\"digest\":\"7月21日，重庆多地遭遇暴雨，空中闪电不断雷鸣阵阵，大雨下了一整夜。早晨，暴雨已造成多处路面积水，许多地方积水已经漫过了车顶盖。\"},{\"title\":\"网友偶遇张颂文考科目二\",\"hotnum\":2380765,\"digest\":\"7月20日，有网友爆料称，偶遇张颂文考科目二，被多人围观仍处变不惊满分通过，引发关注。\"},{\"title\":\"男子怀疑妻子出轨当街捅死2人\",\"hotnum\":2341521,\"digest\":\"7月21日，太原市公安局万柏林分局通报：—男子怀疑妻子出轨，在千峰南路某小区附近将两人捅伤致死，犯罪嫌疑人被当场控制。\"},{\"title\":\"台湾女大学生被掉落空调砸中身亡\",\"hotnum\":2337168,\"digest\":\"台湾新北市7月20日发生一起悲剧，等公交车的22岁女生被从17楼掉下来的空调砸中，不幸身亡。警方：安装工涉嫌过失致死罪。\"},{\"title\":\"男子称海上钓鱼钓到“飞机”\",\"hotnum\":2321012,\"digest\":\"7月20日，山东青岛。男子称在海上钓鱼时钓到一架“飞机”。当事人陈先生称：开始以为是小船，鱼钩钩过来才发现是“飞机”，已经报海警处理了。\"},{\"title\":\"男子自曝想加女生微信误碰大腿被拘\",\"hotnum\":2116585,\"digest\":\"7月19日，湖北一男子向记者反映，在今年5月，他被武汉警方处以10日行政拘留处罚，案由是在地铁上摸一名女孩大腿。该男子表示，自己想加女生微信误碰大腿。\"},{\"title\":\"重庆8个区县暴雨主城多地内涝\",\"hotnum\":2020577,\"digest\":\"7月20日8时至21日8时，重庆市中到大雨，局地暴雨到大暴雨。重庆主城多个地方出现积水，部分道路交通一度中断。渝中区通远门城墙部分垮塌。\"},{\"title\":\"李玟讣闻公开丧礼细节安排\",\"hotnum\":1775125,\"digest\":\"7月20日晚，李玟两位姐姐刊登讣闻，正式公布丧礼各项安排：家人谢绝帛金，其丈夫名字不在名单中。\"},{\"title\":\"四川路人串串式集体跳水救人\",\"hotnum\":1707882,\"digest\":\"7月19日，四川邛崃，一辆小轿车坠河，驾驶员被困车内。危急时刻，多名路人接连跳入水中救援。最终，众人合力将被困人员救上岸。\"},{\"title\":\"女子嫌狗狗小便将其倒挂窗外5分钟\",\"hotnum\":1661015,\"digest\":\"7月20日，辽宁鞍山，一名网友发视频称，疑似狗狗在家小便，邻居将狗狗倒立吊在窗外近5分钟，狗狗发出阵阵惨叫。\"},{\"title\":\"年轻人给芒果核梳毛被指不务正业\",\"hotnum\":1473484,\"digest\":\"近日，年轻人在社交平台晒出自己“养芒果核”的经历。有人表示不理解，称“不务正业”。对此，一名果核主人回复，精神寄托，类似大学生养纸狗。\"},{\"title\":\"北京官方回应“为何降雨没预报的大”\",\"hotnum\":1393453,\"digest\":\"截至7月21日上午，北京部分地区滴雨未下，实际的雨没有预报的大，对此疑问，雷蕾表示，不同地区会存在一些感官上的差异，因为降雨不均和降雨的阶段性导致。\"},{\"title\":\"入职要交毕业证原件?人社部回应\",\"hotnum\":1374965,\"digest\":\"近日，有毕业生反映入职时遭遇“扣证件”等问题，引发关注。人力资源社会保障部7月20日回应，“扣证件”为典型的求职陷阱，遇到这种情况请果断拒绝。\"},{\"title\":\"台风杜苏芮生成 将影响中国东南沿海\",\"hotnum\":1368278,\"digest\":\"据中央气象台网站消息，今年第5号台风“杜苏芮”(热带风暴级)已于7月21日上午(北京时间)在菲律宾以东洋面生成，未来将影响我国东南沿海。\"},{\"title\":\"剧是一集没看气是一点没少生\",\"hotnum\":1362143,\"digest\":\"近日，电视剧《我的人间烟火》热播，对于女主对男主的奋不顾身，网友表示：2023年了，还能在网上刷到这样恋爱脑的女主，真挺让人无助的。\"},{\"title\":\"专家：一二线城市应尽快取消限购\",\"hotnum\":1319502,\"digest\":\"近日，财政部财政科学研究所原所长贾康在接受采访时表示，总体的房地产市场回暖不令人满意，一二线城市尽快在可能取消的限购、限贷、限价等方面采取实际措施。\"},{\"title\":\"六公主评长安三万里\",\"hotnum\":1251957,\"digest\":\"近日，电影《长安三万里》热映，六公主评：到了这个层面上，我们被中国文化深深地震撼，就是一件非常自然而然的事情了。\"},{\"title\":\"今日二伏 你吃面了吗\",\"hotnum\":1200272,\"digest\":\"7月21日，迎来今年三伏里的中伏，“头伏饺子二伏面，三伏烙饼摊鸡蛋”，按照我国多数地区的食俗，中伏这天要吃面条。\"},{\"title\":\"官方通报\\\"清廉餐\\\":全面整改\",\"hotnum\":1095959,\"digest\":\"近日，陕西一地安排“清廉”主题餐，通过对菜品重新起名意图赋予“清廉”含义，被指形式主义。7月21日，官方通报：全面整改，相关责任人停职。\"},{\"title\":\"现场人员讲述43头野象出没云南磨憨\",\"hotnum\":920151,\"digest\":\"7月12日以来，不断有村民反映，在云南磨憨—磨丁经济合作区磨憨镇有野生亚洲象群出没。昆明市消防救援支队全时段盯紧象群活动轨迹，累计发现43头野生亚洲象。\"},{\"title\":\"张帅对手托特道歉愿坐下来谈\",\"hotnum\":907061,\"digest\":\"7月21日，中国网球名将张帅在匈牙利布达佩斯站退赛事件有了后续，张帅的对手托特在第二轮被淘汰之后录制视频公开进行道歉，她表示对此事件感到愧疚。\"},{\"title\":\"奶奶当面数落妈妈儿子霸气维护\",\"hotnum\":869523,\"digest\":\"7月19日，云南，奶奶在孙子面前一直数落他妈妈，九岁儿子霸气护妈，“先管好你儿子再来管我妈”。网友：男孩句句在理，太暖心了。\"},{\"title\":\"孙女带爷爷奶奶旅游 出发前要先宣誓\",\"hotnum\":865242,\"digest\":\"近日，一段孙女带爷爷奶奶去北京旅游，出发前先宣誓的视频，引发无数网友共鸣。\"},{\"title\":\"李佳琦与母亲合开新公司\",\"hotnum\":727056,\"digest\":\"近日，记者从天眼查App获悉，上海琦焜管理咨询有限公司成立，法定代表人、执行董事为李文利（李佳琦母亲）。该公司由李佳琦与李文利分别持股99%、1%。\"},{\"title\":\"31岁宝妈持续3年订牛奶弥补童年遗憾\",\"hotnum\":681646,\"digest\":\"7月18日，浙江宁波。31岁的宝妈周女士小时候羡慕别人家门口有奶箱，长大后就开始一直给家里订牛奶，只为了每天早上体验去拿牛奶的感觉。\"},{\"title\":\"许沁不敢向同事坦诚没车了\",\"hotnum\":644752,\"digest\":\"近日，电视剧《我的人间烟火》热播，女主角许沁为了男主和家里人闹掰，将家里给的车子房子归还，却不敢向同事坦诚没车了。网友：虚荣的小女孩罢了。\"},{\"title\":\"华西村1元卖掉集团公司80%股权\",\"hotnum\":556359,\"digest\":\"7月20日，华西股份发布公告称，公司实控人拟将其持有的华西集团有限公司80%股权转让给江阴联华优化调整产业投资合伙企业。股权的转让价格为人民币1元。\"},{\"title\":\"警方通报游客为争抢拍照点打架\",\"hotnum\":555846,\"digest\":\"7月20日，游客为争抢318拍摄点现场开打。四川警方通报：相关人员已第一时间到四川省天全县人民医院接受检查，且涉案当事人均已到公安机关配合调查。\"}]}}', 2);
INSERT INTO `infos` (`id`, `created_at`, `updated_at`, `content`, `type_id`) VALUES (33, '2023-06-11 16:20:35.481', '2023-07-21 14:48:48.076', '{\"code\":200,\"msg\":\"success\",\"result\":{\"list\":[{\"hotword\":\"李佳琦与母亲合开新公司\",\"hotwordnum\":\" 1705830\",\"hottag\":\"热\"},{\"hotword\":\"许沁不敢向同事坦诚没车了\",\"hotwordnum\":\"剧集 1659404\",\"hottag\":\"\"},{\"hotword\":\"要促进民营经济做大做优做强\",\"hotwordnum\":\" 1221241\",\"hottag\":\"热\"},{\"hotword\":\"00后以抑郁想自杀为由拒服兵役被罚\",\"hotwordnum\":\" 1092924\",\"hottag\":\"新\"},{\"hotword\":\"刘奕君儿子看父亲的剧ptsd了\",\"hotwordnum\":\"剧集 896710\",\"hottag\":\"暖\"},{\"hotword\":\"男孩收到研究生录取通知书时正在工地和水泥\",\"hotwordnum\":\" 716226\",\"hottag\":\"热\"},{\"hotword\":\"许沁的虎扑评分\",\"hotwordnum\":\"剧集 697210\",\"hottag\":\"\"},{\"hotword\":\"杨洋王楚然杨超越版恶作剧之吻\",\"hotwordnum\":\"剧集 610581\",\"hottag\":\"\"},{\"hotword\":\"李玟讣闻\",\"hotwordnum\":\" 610484\",\"hottag\":\"新\"},{\"hotword\":\"原来许沁原著更疯批\",\"hotwordnum\":\"剧集 596345\",\"hottag\":\"\"},{\"hotword\":\"孟宴臣叫孟沁了\",\"hotwordnum\":\"剧集 522580\",\"hottag\":\"新\"},{\"hotword\":\"bw\",\"hotwordnum\":\" 492881\",\"hottag\":\"\"},{\"hotword\":\"TFBOYS十周年演唱会座位图\",\"hotwordnum\":\"音乐 483187\",\"hottag\":\"\"},{\"hotword\":\"刘昊然是不是该刮胡子了\",\"hotwordnum\":\" 453668\",\"hottag\":\"暖\"},{\"hotword\":\"原来花花的闹钟是小鸟做的\",\"hotwordnum\":\" 398239\",\"hottag\":\"新\"},{\"hotword\":\"封神第一部票房破亿\",\"hotwordnum\":\"电影 390426\",\"hottag\":\"新\"},{\"hotword\":\"卡琳娜cos刃\",\"hotwordnum\":\" 357669\",\"hottag\":\"\"},{\"hotword\":\"asap\",\"hotwordnum\":\"音乐 352075\",\"hottag\":\"\"},{\"hotword\":\"敦煌骆驼疑似被人骑死了\",\"hotwordnum\":\" 293146\",\"hottag\":\"热\"},{\"hotword\":\"王者峡谷出现手机\",\"hotwordnum\":\" 236870\",\"hottag\":\"\"},{\"hotword\":\"印2女子被强迫裸体游街还遭侵犯\",\"hotwordnum\":\" 235904\",\"hottag\":\"热\"},{\"hotword\":\"中餐厅7变了\",\"hotwordnum\":\"综艺 231053\",\"hottag\":\"新\"},{\"hotword\":\"仙剑三豆瓣评分涨至9.0分\",\"hotwordnum\":\"剧集 228567\",\"hottag\":\"新\"},{\"hotword\":\"白敬亭魏大勋情头\",\"hotwordnum\":\" 224362\",\"hottag\":\"新\"},{\"hotword\":\"为什么河南家长会选择高考移民\",\"hotwordnum\":\" 218475\",\"hottag\":\"新\"},{\"hotword\":\"芭比剧本是如何通过的\",\"hotwordnum\":\"电影 216094\",\"hottag\":\"新\"},{\"hotword\":\"男子穿漏洞鞋开车被扣3分罚100\",\"hotwordnum\":\" 212184\",\"hottag\":\"\"},{\"hotword\":\"周杰伦演唱会 猫眼\",\"hotwordnum\":\"音乐 209704\",\"hottag\":\"新\"},{\"hotword\":\"口腔科并不是拔鱼刺的科室\",\"hotwordnum\":\" 204365\",\"hottag\":\"\"},{\"hotword\":\"丈夫为鼓励妻子产后恢复走一步发100\",\"hotwordnum\":\" 203334\",\"hottag\":\"新\"},{\"hotword\":\"只有白敬亭觉得虐吧\",\"hotwordnum\":\"剧集 202985\",\"hottag\":\"\"},{\"hotword\":\"张一山不跟张俪演戏的原因\",\"hotwordnum\":\"综艺 202413\",\"hottag\":\"\"},{\"hotword\":\"宁静对李若彤说我就是要打断你\",\"hotwordnum\":\"综艺 201551\",\"hottag\":\"新\"},{\"hotword\":\"孩子躺游戏车前遭亲戚家孩子碾压\",\"hotwordnum\":\" 201087\",\"hottag\":\"\"},{\"hotword\":\"社交冷漠症\",\"hotwordnum\":\" 200828\",\"hottag\":\"新\"},{\"hotword\":\"张艺兴演唱会\",\"hotwordnum\":\"音乐 200751\",\"hottag\":\"\"},{\"hotword\":\"Angelababy迪丽热巴芭比造型\",\"hotwordnum\":\" 200640\",\"hottag\":\"\"},{\"hotword\":\"成年人早醒是衰老的表现\",\"hotwordnum\":\" 200525\",\"hottag\":\"\"},{\"hotword\":\"6个月宝宝为逃避抽血顽强装睡\",\"hotwordnum\":\" 193551\",\"hottag\":\"新\"},{\"hotword\":\"LPL最佳新秀Tangyuan\",\"hotwordnum\":\" 189153\",\"hottag\":\"\"},{\"hotword\":\"重庆暴雨开车如开船\",\"hotwordnum\":\" 183286\",\"hottag\":\"\"},{\"hotword\":\"芭比\",\"hotwordnum\":\"电影 179359\",\"hottag\":\"新\"},{\"hotword\":\"惊奇队长2正式预告\",\"hotwordnum\":\"电影 177612\",\"hottag\":\"新\"},{\"hotword\":\"乘风之夜芭莎收官大片\",\"hotwordnum\":\"综艺 168119\",\"hottag\":\"\"},{\"hotword\":\"陈妍希忘了删文案\",\"hotwordnum\":\"综艺 167413\",\"hottag\":\"\"},{\"hotword\":\"周杰伦天津演唱会抢票\",\"hotwordnum\":\"音乐 165653\",\"hottag\":\"新\"},{\"hotword\":\"潮水退去钱塘江露出大地之树\",\"hotwordnum\":\" 164910\",\"hottag\":\"暖\"},{\"hotword\":\"男孩利用杠杆原理帮建筑工父亲铺瓷砖\",\"hotwordnum\":\" 164904\",\"hottag\":\"\"},{\"hotword\":\"被北大录取女生分享经验强调没手机\",\"hotwordnum\":\" 164898\",\"hottag\":\"\"},{\"hotword\":\"杀不死的石家庄\",\"hotwordnum\":\" 164878\",\"hottag\":\"\"}]}}', 3);
INSERT INTO `infos` (`id`, `created_at`, `updated_at`, `content`, `type_id`) VALUES (34, '2023-06-11 16:20:35.818', '2023-07-21 14:48:48.258', '{\"code\":200,\"msg\":\"success\",\"result\":{\"list\":[{\"mtime\":\"2023-07-21\",\"title\":\"俄对乌空袭波及中国领馆 外交部回应\",\"digest\":\"7月20日，俄罗斯对乌克兰空袭波及中国驻敖德萨总领馆，外交部回应：冲击波震落了总领馆部分墙面和窗户玻璃，没有造成人员伤亡。\"},{\"mtime\":\"2023-07-21\",\"title\":\"地球连续35年收到神秘规律性信号\",\"digest\":\"近日，有研究人员指出，地球连续35年收到神秘规律性信号，每次持续5分钟，间隔17分钟，电波性质不符合已知理论。\"},{\"mtime\":\"2023-07-21\",\"title\":\"中建八局回应高铁事件：高度重视\",\"digest\":\"7月20日，中建八局发文称，针对媒体反映山东莱荣高铁有关施工质量问题，山东省交通运输厅已成立调查组，全力配合调查组开展调查核实工作。\"},{\"mtime\":\"2023-07-21\",\"title\":\"网友偶遇张颂文考科目二\",\"digest\":\"7月20日，有网友爆料称，偶遇张颂文考科目二，被多人围观仍处变不惊满分通过，引发关注。\"},{\"mtime\":\"2023-07-21\",\"title\":\"缉毒警退休警嫂朋友圈破防了\",\"digest\":\"7月20日，禁毒缉毒支队民警肖哥退休，从军营到警营，有40年都在从事禁毒工作。警嫂朋友圈“终于不再为你担惊受怕”。\"},{\"mtime\":\"2023-07-21\",\"title\":\"媒体：中建八局谁给你的胆\",\"digest\":\"近日，媒体反映山东莱荣高铁有关施工质量问题引发热议。7月20日，有媒体发文称：高铁路基竟敢偷工减料，中建八局，谁给你的狗胆？\"},{\"mtime\":\"2023-07-21\",\"title\":\"西安就回流生问题成立调查组\",\"digest\":\"7月20日，西安市教育局发布关于今年中考有关情况的补充说明，针对“回流生”资格造假、中介机构违规操作等问题，成立联合调查组逐一核查。\"},{\"mtime\":\"2023-07-21\",\"title\":\"男孩烧书引起失火从18楼跳下\",\"digest\":\"7月19日，网传湖南沅江市一13岁男孩晚十点左右，在家烧书引起失火，随后从18楼跳下。\"},{\"mtime\":\"2023-07-21\",\"title\":\"粉丝追星飞机上喊“陛下臣妾爱你”\",\"digest\":\"近日，女演员孙耀琦发视频称，在飞机上偶遇某明星狂热粉丝，大喊“陛下，臣妾想抱抱你。”视频显示，飞机空乘人员在现场维持秩序。\"},{\"mtime\":\"2023-07-21\",\"title\":\"云南旅游团再现强制购物 官方调查\",\"digest\":\"7月20日，有网友爆料称，云南旅游团再次出现强制消费，得到整车乘客的抵制，最终旅行社更换了新导游。\"},{\"mtime\":\"2023-07-21\",\"title\":\"航班起飞忘加油折返？湖南航空辟谣\",\"digest\":\"近日，网传一航班起飞忘加油折返，引起热议，7月20日，湖南航空一工作人员称，自南京飞往保山的航班是因天气原因延迟起飞，不是因为加油的原因。\"},{\"mtime\":\"2023-07-21\",\"title\":\"江西警方确认河道内发现无名尸体\",\"digest\":\"7月20日，江西省上饶市万年县公安局发布警情通报：万年县滨溪河河道内发现一无名尸体。事发河道很浅，但却十分污浊，平时是用来排放污水的。\"},{\"mtime\":\"2023-07-21\",\"title\":\"湖南通报多家银行高管靠企业吃企业\",\"digest\":\"7月20日，湖南省纪委监委对2023年3月以来省管企业靠企吃企问题专项整治期间查处的8起典型案例进行公开通报。其中，有两起案例与金融反腐相关。\"},{\"mtime\":\"2023-07-21\",\"title\":\"南航回应机票近4万元只有1瓶水\",\"digest\":\"7月20日，南方航空公司回应“近4万元商务舱机票只有1瓶水”事件，“具体餐食数量以机上安排为准，没有具体的规定，如有额外需求可告诉工作人员”。\"},{\"mtime\":\"2023-07-21\",\"title\":\"雅诗兰黛称遭黑客网络攻击\",\"digest\":\"7月20日，雅诗兰黛集团表示遭黑客网络攻击，预计将导致该公司部分业务运营中断。该公司表示，正努力了解被盗数据的性质和范围。\"},{\"mtime\":\"2023-07-21\",\"title\":\"村民避雨偶遇“龙吸水”景观\",\"digest\":\"7月19日，海南东方。村民避雨时偶遇“龙吸水”景观齐呼壮观。视频拍摄者称，大家是第一次见，断断续续1小时出现四五次。\"},{\"mtime\":\"2023-07-21\",\"title\":\"4岁男孩被超市内裸露电线电晕\",\"digest\":\"近日，一孩子搭在超市的围栏处玩耍时，突然脑袋后仰，长达40秒一动不动，随后倒在地上。发布者肖先生表示，是自己朋友的孩子，目前被抢救过来了。\"},{\"mtime\":\"2023-07-21\",\"title\":\"剧是一集没看气是一点没少生\",\"digest\":\"近日，电视剧《我的人间烟火》热播，对于女主对男主的奋不顾身，网友表示：2023年了，还能在网上刷到这样恋爱脑的女主，真挺让人无助的。\"},{\"mtime\":\"2023-07-21\",\"title\":\"俞敏洪称儿子实习每天工作18小时\",\"digest\":\"近日，俞敏洪在演讲中谈及两个孩子，称对他们没太严格的要求，但要自力更生。他称，儿子大三实习，每天工作18个小时。\"},{\"mtime\":\"2023-07-21\",\"title\":\"男子怀疑妻子出轨当街捅死2人\",\"digest\":\"7月21日，太原市公安局万柏林分局通报：—男子怀疑妻子出轨，在千峰南路某小区附近将两人捅伤致死，犯罪嫌疑人被当场控制。\"},{\"mtime\":\"2023-07-21\",\"title\":\"外交部谈中国强化限制日本食品进口\",\"digest\":\"在7月20日举行的外交部例行记者会上，毛宁表示，日方应认真倾听国际社会的呼声，停止强推核污染水排海计划，以负责任的方式处置核污染水。\"},{\"mtime\":\"2023-07-21\",\"title\":\"游客用登山杖戳乐山大佛景区石壁\",\"digest\":\"7月20日，网友发视频称四川乐山大佛景区一游客用登山杖戳石壁。视频显示，石壁周围布满小孔，游客用登山杖尖头部分在石壁上用力钻洞。\"},{\"mtime\":\"2023-07-21\",\"title\":\"孙女带爷爷奶奶旅游 出发前要先宣誓\",\"digest\":\"近日，一段孙女带爷爷奶奶去北京旅游，出发前先宣誓的视频，引发无数网友共鸣。\"},{\"mtime\":\"2023-07-21\",\"title\":\"男子自曝想加女生微信误碰大腿被拘\",\"digest\":\"7月19日，湖北一男子向记者反映，在今年5月，他被武汉警方处以10日行政拘留处罚，案由是在地铁上摸一名女孩大腿。该男子表示，自己想加女生微信误碰大腿。\"},{\"mtime\":\"2023-07-21\",\"title\":\"暴雨致无锡东站现“瀑布”\",\"digest\":\"2023年07月20日08时12分，江苏无锡市气象台升级发布暴雨红色预警信号。不少网友发布视频反映：暴雨导致无锡东站出现罕见的“瀑布景观”。\"},{\"mtime\":\"2023-07-21\",\"title\":\"香港电竞选手因ID被亚运禁赛\",\"digest\":\"中国香港电竞总会近日发表声明，指于7月16日举行的“AESF亚运征途-Dota2”中国对中国香港的赛事中，林奇隆因其游戏ID包含敏感字眼，被取消参赛资格。\"},{\"mtime\":\"2023-07-21\",\"title\":\"长沙一男子当街杀害妻子被刑拘\",\"digest\":\"7月10日，长沙发生一起刑事案件，一男子在某企业门口杀害一名女子。20日，据知情人处获悉，贺某某涉嫌故意杀人已被警方刑事拘留。\"},{\"mtime\":\"2023-07-21\",\"title\":\"一中国公民在新西兰失踪\",\"digest\":\"据新西兰媒体1News报道，当地时间7月19日，克赖斯特彻奇市一名华人房地产经纪人YanfeiBao(包燕飞，音译)失踪。\"},{\"mtime\":\"2023-07-21\",\"title\":\"央媒评回流生争议：别破坏教育公平\",\"digest\":\"近日，“西安回流生”的话题引发热议。对此，7月20日，央广网发文评价：莫让投机取巧破坏教育公平，相关部门应深入调查，给公众一个交代。\"},{\"mtime\":\"2023-07-21\",\"title\":\"巴特勒成首位前往村BA的国际球星\",\"digest\":\"村BA出圈一年后，第一位NBA球星也将前往现场。7月21日，NBA热火队球星巴特勒将前往村BA发源地台盘村，亲身体验中国乡村篮球的火爆。\"},{\"mtime\":\"2023-07-21\",\"title\":\"小区发生火灾消防栓没水？多方回应\",\"digest\":\"7月19日，有网友爆料称，重庆一小区发生火灾，物业在门口打了水泥桩导致消防车无法进入小区，消防栓没水致使火灾持续很久。\"},{\"mtime\":\"2023-07-21\",\"title\":\"警方通报游客为争抢拍照点打架\",\"digest\":\"7月20日，游客为争抢318拍摄点现场开打。四川警方通报：相关人员已第一时间到四川省天全县人民医院接受检查，且涉案当事人均已到公安机关配合调查。\"},{\"mtime\":\"2023-07-21\",\"title\":\"保姆发现宝宝玩插板瞬间扑过去制止\",\"digest\":\"近日，一位保姆发现小孩在玩电插板的一瞬间，立马扑过来拔下插头。网友：请对人了，看得出她满眼都是心疼。\"},{\"mtime\":\"2023-07-21\",\"title\":\"湖南一女子走失38年被找到\",\"digest\":\"38年前，左楚华意外走失，被人收养到福建，不到两年又回到衡阳生活至今。神奇的是，左楚华现在所住的地方，与她走失之处的车程只需20分钟。\"},{\"mtime\":\"2023-07-21\",\"title\":\"女子“爬楼”减肥月瘦13斤\",\"digest\":\"近日，浙江丽水的钟女士说自己每天下班后就去爬楼梯，每天爬21层楼，一共4-5趟。坚持了将近一个半月，三餐也正常吃，瘦了13斤。\"},{\"mtime\":\"2023-07-21\",\"title\":\"张豆豆曾参加恋综结识海归精英\",\"digest\":\"7月20日，孙杨、张豆豆同时在微博晒出结婚照和结婚证照片官宣结婚。据悉，女方比孙杨小五岁，曾参加恋综结识海归精英。\"},{\"mtime\":\"2023-07-21\",\"title\":\"中国联通原总经理被控受贿超6645万\",\"digest\":\"7月20日，青岛中级人民法院一审公开开庭审理中国联合网络通信集团有限公司原总经理李国华受贿、滥用职权一案，其一审被控受贿超6645万元。\"},{\"mtime\":\"2023-07-21\",\"title\":\"旅俄大熊猫如意和丁丁终于相见了\",\"digest\":\"莫斯科动物园19日发布消息称，中国旅俄雄性大熊猫“如意”和雌性大熊猫“丁丁”完成首次“亲密接触”。大熊猫宝宝出生后，它们将回到中国。\"},{\"mtime\":\"2023-07-21\",\"title\":\"江苏无锡突降暴雨 居民上街摸鱼\",\"digest\":\"7月20日，无锡暴雨过后，部分路段积水严重，行人及车辆出行严重受阻。现场视频显示有居民上街摸鱼、积水冲浪。\"},{\"mtime\":\"2023-07-21\",\"title\":\"15省份GDP出炉 上海增长9.7%领跑\",\"digest\":\"截至7月20日，至少已有广东、山东、浙江、四川等15个省份公布了今年上半年经济数据。上海增速最高，达到9.7%。\"}]}}', 4);
INSERT INTO `infos` (`id`, `created_at`, `updated_at`, `content`, `type_id`) VALUES (35, '2023-06-11 16:20:36.139', '2023-07-21 14:48:48.443', '{\"code\":200,\"msg\":\"success\",\"result\":{\"content\":\"我们所有的努力所有的奋斗，都是为了拥有一个美好的未来。和遇见更好的自己。请把努力当成一种习惯，而不是三分钟热度。每一个你羡慕的收获，都是努力用心拼来的。早安！ \"}}', 5);
INSERT INTO `infos` (`id`, `created_at`, `updated_at`, `content`, `type_id`) VALUES (36, '2023-06-11 16:20:36.534', '2023-07-21 14:48:48.621', '{\"code\":200,\"msg\":\"success\",\"result\":{\"content\":\"想念一张脸。我也如此，闭上眼，脑海满满都是你的样子，挥之不去。\"}}', 6);
INSERT INTO `infos` (`id`, `created_at`, `updated_at`, `content`, `type_id`) VALUES (37, '2023-06-11 16:20:36.938', '2023-07-21 14:48:48.780', '{\"code\":200,\"msg\":\"success\",\"result\":{\"list\":[{\"title\":\"路透社创办人路透出生\",\"lsdate\":\"1816-07-21\"},{\"title\":\"资产阶级改良主义思想家薛福成病逝\",\"lsdate\":\"1894-07-21\"},{\"title\":\"海明威诞生\",\"lsdate\":\"1899-07-21\"},{\"title\":\"《天津学生联合会会报》创刊\",\"lsdate\":\"1919-07-21\"},{\"title\":\"戏剧皇后埃伦·特里逝世\",\"lsdate\":\"1928-07-21\"},{\"title\":\"关向应病逝\",\"lsdate\":\"1946-07-21\"},{\"title\":\"中共中央转发北京市委关于整风工作的报告\",\"lsdate\":\"1950-07-21\"},{\"title\":\"关于印度支那问题的日内瓦协议签订\",\"lsdate\":\"1954-07-21\"},{\"title\":\"“阿波罗”登上月球\",\"lsdate\":\"1969-07-21\"},{\"title\":\"我国与沙特阿拉伯建交\",\"lsdate\":\"1990-07-21\"},{\"title\":\"北京正负电子对撞机正式通过验收\",\"lsdate\":\"1990-07-21\"},{\"title\":\"桑兰在纽约友好运动会上意外受伤\",\"lsdate\":\"1998-07-21\"},{\"title\":\"武汉遭受百年罕见大暴雨袭击\",\"lsdate\":\"1998-07-21\"},{\"title\":\"中国与瑙鲁建交\",\"lsdate\":\"2002-07-21\"},{\"title\":\"《城市生活无着的流浪乞讨人员救助管理办法实施细则》通过并公布\",\"lsdate\":\"2003-07-21\"}]}}', 7);
COMMIT;

-- ----------------------------
-- Table structure for logs
-- ----------------------------
DROP TABLE IF EXISTS `logs`;
CREATE TABLE `logs` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `user_name` varchar(42) DEFAULT NULL,
  `nick_name` varchar(42) DEFAULT NULL,
  `ip` varchar(20) DEFAULT NULL,
  `address` varchar(64) DEFAULT NULL,
  `device` varchar(36) DEFAULT NULL,
  `level` varchar(36) DEFAULT NULL,
  `content` longtext,
  `email` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1162 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of logs
-- ----------------------------
BEGIN;
INSERT INTO `logs` (`id`, `created_at`, `updated_at`, `user_name`, `nick_name`, `ip`, `address`, `device`, `level`, `content`, `email`) VALUES (1159, '2023-07-21 14:46:54.571', '2023-07-21 14:46:54.571', '', '', '', '', '', 'Info', '热搜信息更新成功', '');
INSERT INTO `logs` (`id`, `created_at`, `updated_at`, `user_name`, `nick_name`, `ip`, `address`, `device`, `level`, `content`, `email`) VALUES (1160, '2023-07-21 14:47:11.982', '2023-07-21 14:47:11.982', 'admin', 'hello world', '127.0.0.1', '内网IP', 'Mac', 'Info', '通过（用户名）登录成功', '');
INSERT INTO `logs` (`id`, `created_at`, `updated_at`, `user_name`, `nick_name`, `ip`, `address`, `device`, `level`, `content`, `email`) VALUES (1161, '2023-07-21 14:48:48.784', '2023-07-21 14:48:48.784', '', '', '', '', '', 'Info', '热搜信息更新成功', '');
COMMIT;

-- ----------------------------
-- Table structure for musics
-- ----------------------------
DROP TABLE IF EXISTS `musics`;
CREATE TABLE `musics` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `name` varchar(50) DEFAULT NULL,
  `author` varchar(50) DEFAULT NULL,
  `url` varchar(200) DEFAULT NULL,
  `cover` varchar(200) DEFAULT NULL,
  `status` tinyint(1) DEFAULT NULL,
  `sort` int(6) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of musics
-- ----------------------------
BEGIN;
INSERT INTO `musics` (`id`, `created_at`, `updated_at`, `name`, `author`, `url`, `cover`, `status`, `sort`) VALUES (25, '2023-07-20 14:36:44.549', '2023-07-21 14:47:24.579', '无法回到过去', '未知', 'http://localhost:3000/uploads/file/e602d3bd2051ef1c626ad0defbc33b90.mp3', 'http://localhost:3000/uploads/file/90cab7305432adf134780cd3bbe193d3.jpg', 1, 1);
COMMIT;

-- ----------------------------
-- Table structure for tags
-- ----------------------------
DROP TABLE IF EXISTS `tags`;
CREATE TABLE `tags` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `name` varchar(18) DEFAULT NULL,
  `cover` longtext,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of tags
-- ----------------------------
BEGIN;
INSERT INTO `tags` (`id`, `created_at`, `updated_at`, `name`, `cover`) VALUES (38, '2023-07-17 17:06:45.920', '2023-07-20 18:04:20.055', 'M1', 'http://myblog.centos8.com/uploads/file/4de3d9aca241848dcda4ade566c62a0d.webp');
INSERT INTO `tags` (`id`, `created_at`, `updated_at`, `name`, `cover`) VALUES (44, '2023-07-20 18:15:59.314', '2023-07-20 22:19:54.808', '博客搭建', 'http://myblog.centos8.com/uploads/file/5f03de02fb2878e115807767d0b34211.webp');
INSERT INTO `tags` (`id`, `created_at`, `updated_at`, `name`, `cover`) VALUES (46, '2023-07-20 20:14:12.061', '2023-07-20 22:18:02.206', 'SCSS', 'http://myblog.centos8.com/uploads/file/76e91c19465e5a79a81ef1f225db5102.webp');
INSERT INTO `tags` (`id`, `created_at`, `updated_at`, `name`, `cover`) VALUES (47, '2023-07-20 20:22:50.694', '2023-07-20 22:18:56.027', 'Git', 'http://myblog.centos8.com/uploads/file/c038c76a09d38abf6135e993be67f7ce.webp');
INSERT INTO `tags` (`id`, `created_at`, `updated_at`, `name`, `cover`) VALUES (48, '2023-07-20 20:26:45.824', '2023-07-20 22:19:42.643', 'mysql', 'http://myblog.centos8.com/uploads/file/c2c625f8b96f035617ab30695a9eb3ff.webp');
INSERT INTO `tags` (`id`, `created_at`, `updated_at`, `name`, `cover`) VALUES (49, '2023-07-20 20:30:22.986', '2023-07-20 22:19:31.854', 'redis', 'http://myblog.centos8.com/uploads/file/db6b3d0b3952eb20b7390e5485dd0d61.gif');
INSERT INTO `tags` (`id`, `created_at`, `updated_at`, `name`, `cover`) VALUES (50, '2023-07-20 20:36:19.104', '2023-07-20 22:19:19.239', 'typora', 'http://myblog.centos8.com/uploads/file/5dd85ee57b9ce437867bd393384c0e06.webp');
INSERT INTO `tags` (`id`, `created_at`, `updated_at`, `name`, `cover`) VALUES (51, '2023-07-20 20:54:20.104', '2023-07-20 22:19:06.658', 'javascript', 'http://myblog.centos8.com/uploads/file/148d0591700307bdaf06ba2131ac5da2.webp');
INSERT INTO `tags` (`id`, `created_at`, `updated_at`, `name`, `cover`) VALUES (52, '2023-07-20 22:20:58.366', '2023-07-20 22:22:20.237', 'centos', 'http://myblog.centos8.com/uploads/file/49ea04ce6fb6f5ca33a7e38651a45631.webp');
COMMIT;

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `user_name` varchar(36) DEFAULT NULL,
  `password` varchar(128) DEFAULT NULL,
  `nick_name` varchar(36) DEFAULT NULL,
  `email` varchar(36) DEFAULT NULL,
  `avatar` varchar(200) DEFAULT NULL,
  `role` int(6) DEFAULT NULL,
  `register_origin` int(6) DEFAULT NULL,
  `ip` varchar(36) DEFAULT NULL,
  `address` varchar(36) DEFAULT NULL,
  `device` varchar(36) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_name` (`user_name`),
  UNIQUE KEY `idx_users_user_name` (`user_name`)
) ENGINE=InnoDB AUTO_INCREMENT=89 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of users
-- ----------------------------
BEGIN;
INSERT INTO `users` (`id`, `created_at`, `updated_at`, `user_name`, `password`, `nick_name`, `email`, `avatar`, `role`, `register_origin`, `ip`, `address`, `device`) VALUES (1, '2023-06-04 16:36:01.161', '2023-07-21 14:47:11.977', 'admin', '$2a$04$pTXYRFJDrgaOrI2rs/L1pukB9PPTmOdQlUSEeo3cKVBzxEcRlAgOG', 'hello world', '', '/uploads/avatar/favicon.png', 1, 2, '127.0.0.1', '内网IP', 'Mac');
INSERT INTO `users` (`id`, `created_at`, `updated_at`, `user_name`, `password`, `nick_name`, `email`, `avatar`, `role`, `register_origin`, `ip`, `address`, `device`) VALUES (88, '2023-07-19 16:07:35.474', '2023-07-20 21:30:16.695', 'demo', '$2a$04$ru5JRWZnqnjVLeR54jQ3c.k5uczZa8ZZAvvz/pFaeSxaadjmg0eam', '游客', '', '/uploads/avatar/favicon.png', 3, 2, '10.211.55.2', '内网IP', 'Mac');
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
